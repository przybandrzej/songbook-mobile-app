/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SongbookApi);
  }
}(this, function(expect, SongbookApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('File', function() {
      beforeEach(function() {
        instance = new SongbookApi.File();
      });

      it('should create an instance of File', function() {
        // TODO: update the code to test File
        expect(instance).to.be.a(SongbookApi.File);
      });

      it('should have the property absolute (base name: "absolute")', function() {
        // TODO: update the code to test the property absolute
        expect(instance).to.have.property('absolute');
        // expect(instance.absolute).to.be(expectedValueLiteral);
      });

      it('should have the property absoluteFile (base name: "absoluteFile")', function() {
        // TODO: update the code to test the property absoluteFile
        expect(instance).to.have.property('absoluteFile');
        // expect(instance.absoluteFile).to.be(expectedValueLiteral);
      });

      it('should have the property absolutePath (base name: "absolutePath")', function() {
        // TODO: update the code to test the property absolutePath
        expect(instance).to.have.property('absolutePath');
        // expect(instance.absolutePath).to.be(expectedValueLiteral);
      });

      it('should have the property canonicalFile (base name: "canonicalFile")', function() {
        // TODO: update the code to test the property canonicalFile
        expect(instance).to.have.property('canonicalFile');
        // expect(instance.canonicalFile).to.be(expectedValueLiteral);
      });

      it('should have the property canonicalPath (base name: "canonicalPath")', function() {
        // TODO: update the code to test the property canonicalPath
        expect(instance).to.have.property('canonicalPath');
        // expect(instance.canonicalPath).to.be(expectedValueLiteral);
      });

      it('should have the property directory (base name: "directory")', function() {
        // TODO: update the code to test the property directory
        expect(instance).to.have.property('directory');
        // expect(instance.directory).to.be(expectedValueLiteral);
      });

      it('should have the property file (base name: "file")', function() {
        // TODO: update the code to test the property file
        expect(instance).to.have.property('file');
        // expect(instance.file).to.be(expectedValueLiteral);
      });

      it('should have the property freeSpace (base name: "freeSpace")', function() {
        // TODO: update the code to test the property freeSpace
        expect(instance).to.have.property('freeSpace');
        // expect(instance.freeSpace).to.be(expectedValueLiteral);
      });

      it('should have the property hidden (base name: "hidden")', function() {
        // TODO: update the code to test the property hidden
        expect(instance).to.have.property('hidden');
        // expect(instance.hidden).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property parent (base name: "parent")', function() {
        // TODO: update the code to test the property parent
        expect(instance).to.have.property('parent');
        // expect(instance.parent).to.be(expectedValueLiteral);
      });

      it('should have the property parentFile (base name: "parentFile")', function() {
        // TODO: update the code to test the property parentFile
        expect(instance).to.have.property('parentFile');
        // expect(instance.parentFile).to.be(expectedValueLiteral);
      });

      it('should have the property path (base name: "path")', function() {
        // TODO: update the code to test the property path
        expect(instance).to.have.property('path');
        // expect(instance.path).to.be(expectedValueLiteral);
      });

      it('should have the property totalSpace (base name: "totalSpace")', function() {
        // TODO: update the code to test the property totalSpace
        expect(instance).to.have.property('totalSpace');
        // expect(instance.totalSpace).to.be(expectedValueLiteral);
      });

      it('should have the property usableSpace (base name: "usableSpace")', function() {
        // TODO: update the code to test the property usableSpace
        expect(instance).to.have.property('usableSpace');
        // expect(instance.usableSpace).to.be(expectedValueLiteral);
      });

    });
  });

}));
