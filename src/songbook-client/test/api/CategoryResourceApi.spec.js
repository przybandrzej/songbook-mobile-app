/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SongbookApi);
  }
}(this, function(expect, SongbookApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SongbookApi.CategoryResourceApi();
  });

  describe('(package)', function() {
    describe('CategoryResourceApi', function() {
      describe('createUsingPOST1', function() {
        it('should call createUsingPOST1 successfully', function(done) {
          // TODO: uncomment, update parameter values for createUsingPOST1 call and complete the assertions
          /*
          var categoryDto = new SongbookApi.UniversalCreateDTO();
          categoryDto.id = "0";
          categoryDto.name = "";

          instance.createUsingPOST1(categoryDto, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.CategoryDTO);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteUsingDELETE1', function() {
        it('should call deleteUsingDELETE1 successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteUsingDELETE1 call
          /*
          var id = 789;

          instance.deleteUsingDELETE1(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllUsingGET2', function() {
        it('should call getAllUsingGET2 successfully', function(done) {
          // TODO: uncomment getAllUsingGET2 call and complete the assertions
          /*

          instance.getAllUsingGET2(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.CategoryDTO);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByIdUsingGET2', function() {
        it('should call getByIdUsingGET2 successfully', function(done) {
          // TODO: uncomment, update parameter values for getByIdUsingGET2 call and complete the assertions
          /*
          var id = 789;

          instance.getByIdUsingGET2(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.CategoryDTO);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByNameUsingGET', function() {
        it('should call getByNameUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getByNameUsingGET call and complete the assertions
          /*
          var name = "name_example";

          instance.getByNameUsingGET(name, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.CategoryDTO);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSongsByCategoryIdUsingGET', function() {
        it('should call getSongsByCategoryIdUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getSongsByCategoryIdUsingGET call and complete the assertions
          /*
          var id = 789;

          instance.getSongsByCategoryIdUsingGET(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.SongDTO);
              expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                    expect(data.addedBy.addedBy).to.be.a('number');
                expect(data.addedBy.addedBy).to.be("0");
                expect(data.addedBy.addedSong).to.be.a('number');
                expect(data.addedBy.addedSong).to.be("0");
                expect(data.addedBy.id).to.be.a('number');
                expect(data.addedBy.id).to.be("0");
                expect(data.addedBy.timestamp).to.be.a(Date);
                expect(data.addedBy.timestamp).to.be(new Date());
              expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                    expect(data.author.id).to.be.a('number');
                expect(data.author.id).to.be("0");
                expect(data.author.name).to.be.a('string');
                expect(data.author.name).to.be("");
              expect(data.averageRating).to.be.a('number');
              expect(data.averageRating).to.be();
              expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                    expect(data.category.id).to.be.a('number');
                expect(data.category.id).to.be("0");
                expect(data.category.name).to.be.a('string');
                expect(data.category.name).to.be("");
              {
                let dataCtr = data.coauthors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                  expect(data.authorId).to.be.a('number');
                  expect(data.authorId).to.be("0");
                  expect(data.coauthorFunction).to.be.a('string');
                  expect(data.coauthorFunction).to.be("MUSIC");
                  expect(data.songId).to.be.a('number');
                  expect(data.songId).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.edits;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongEditDTO);
                  expect(data.editedBy).to.be.a('number');
                  expect(data.editedBy).to.be("0");
                  expect(data.editedSong).to.be.a('number');
                  expect(data.editedSong).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.timestamp).to.be.a(Date);
                  expect(data.timestamp).to.be(new Date());
  
                        }
              }
              expect(data.guitarTabs).to.be.a('string');
              expect(data.guitarTabs).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.isAwaiting).to.be.a('boolean');
              expect(data.isAwaiting).to.be(false);
              expect(data.lyrics).to.be.a('string');
              expect(data.lyrics).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.TagDTO);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.trivia).to.be.a('string');
              expect(data.trivia).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateUsingPUT1', function() {
        it('should call updateUsingPUT1 successfully', function(done) {
          // TODO: uncomment, update parameter values for updateUsingPUT1 call and complete the assertions
          /*
          var categoryDto = new SongbookApi.CategoryDTO();
          categoryDto.id = "0";
          categoryDto.name = "";

          instance.updateUsingPUT1(categoryDto, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.CategoryDTO);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
