/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SongbookApi);
  }
}(this, function(expect, SongbookApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SongbookApi.LineResourceApi();
  });

  describe('(package)', function() {
    describe('LineResourceApi', function() {
      describe('addGuitarCordUsingPATCH', function() {
        it('should call addGuitarCordUsingPATCH successfully', function(done) {
          // TODO: uncomment, update parameter values for addGuitarCordUsingPATCH call
          /*
          var cord = new SongbookApi.CreateGuitarCordDTO();
          cord.content = "";
          cord.position = 0;
          var id = 789;

          instance.addGuitarCordUsingPATCH(cord, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllLinesUsingGET', function() {
        it('should call getAllLinesUsingGET successfully', function(done) {
          // TODO: uncomment getAllLinesUsingGET call and complete the assertions
          /*

          instance.getAllLinesUsingGET(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.LineDTO);
              expect(data.content).to.be.a('string');
              // expect(data.content).to.be("");
              expect(data.id).to.be.a('number');
              // expect(data.id).to.be("0");
              expect(data.order).to.be.a('number');
              // expect(data.order).to.be("0");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLineByIdUsingGET', function() {
        it('should call getLineByIdUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getLineByIdUsingGET call and complete the assertions
          /*
          var id = 789;

          instance.getLineByIdUsingGET(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.LineDTO);
            expect(data.content).to.be.a('string');
            // expect(data.content).to.be("");
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be("0");
            expect(data.order).to.be.a('number');
            // expect(data.order).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLineCordsUsingGET', function() {
        it('should call getLineCordsUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getLineCordsUsingGET call and complete the assertions
          /*
          var id = 789;

          instance.getLineCordsUsingGET(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.GuitarCordDTO);
              expect(data.content).to.be.a('string');
              // expect(data.content).to.be("");
              expect(data.id).to.be.a('number');
              // expect(data.id).to.be("0");
              expect(data.position).to.be.a('number');
              // expect(data.position).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeGuitarCordUsingPATCH', function() {
        it('should call removeGuitarCordUsingPATCH successfully', function(done) {
          // TODO: uncomment, update parameter values for removeGuitarCordUsingPATCH call
          /*
          var cordId = 789;
          var id = 789;

          instance.removeGuitarCordUsingPATCH(cordId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateLineUsingPUT', function() {
        it('should call updateLineUsingPUT successfully', function(done) {
          // TODO: uncomment, update parameter values for updateLineUsingPUT call and complete the assertions
          /*
          var lineDTO = new SongbookApi.LineDTO();
          lineDTO.content = "";
          lineDTO.id = "0";
          lineDTO.order = "0";

          instance.updateLineUsingPUT(lineDTO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.LineDTO);
            expect(data.content).to.be.a('string');
            // expect(data.content).to.be("");
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be("0");
            expect(data.order).to.be.a('number');
            // expect(data.order).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
