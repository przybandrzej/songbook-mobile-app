/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SongbookApi);
  }
}(this, function(expect, SongbookApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SongbookApi.AwaitingSongResourceApi();
  });

  describe('(package)', function() {
    describe('AwaitingSongResourceApi', function() {
      describe('getAllUsingGET1', function() {
        it('should call getAllUsingGET1 successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllUsingGET1 call and complete the assertions
          /*
          var opts = {};
          opts.limit = 56;

          instance.getAllUsingGET1(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.SongDTO);
              expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                    expect(data.addedBy.addedBy).to.be.a('number');
                // expect(data.addedBy.addedBy).to.be("0");
                expect(data.addedBy.addedSong).to.be.a('number');
                // expect(data.addedBy.addedSong).to.be("0");
                expect(data.addedBy.id).to.be.a('number');
                // expect(data.addedBy.id).to.be("0");
                expect(data.addedBy.timestamp).to.be.a(Date);
                // expect(data.addedBy.timestamp).to.be(new Date());
              expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                    expect(data.author.id).to.be.a('number');
                // expect(data.author.id).to.be("0");
                expect(data.author.name).to.be.a('string');
                // expect(data.author.name).to.be("");
              expect(data.averageRating).to.be.a('number');
              // expect(data.averageRating).to.be();
              expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                    expect(data.category.id).to.be.a('number');
                // expect(data.category.id).to.be("0");
                expect(data.category.name).to.be.a('string');
                // expect(data.category.name).to.be("");
              {
                let dataCtr = data.coauthors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                  expect(data.authorId).to.be.a('number');
                  // expect(data.authorId).to.be("0");
                  expect(data.coauthorFunction).to.be.a('string');
                  // expect(data.coauthorFunction).to.be("MUSIC");
                  expect(data.songId).to.be.a('number');
                  // expect(data.songId).to.be("0");
                }
              }
              {
                let dataCtr = data.edits;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongEditDTO);
                  expect(data.editedBy).to.be.a('number');
                  // expect(data.editedBy).to.be("0");
                  expect(data.editedSong).to.be.a('number');
                  // expect(data.editedSong).to.be("0");
                  expect(data.id).to.be.a('number');
                  // expect(data.id).to.be("0");
                  expect(data.timestamp).to.be.a(Date);
                  // expect(data.timestamp).to.be(new Date());
                }
              }
              expect(data.guitarTabs).to.be.a('string');
              // expect(data.guitarTabs).to.be("");
              expect(data.id).to.be.a('number');
              // expect(data.id).to.be("0");
              expect(data.isAwaiting).to.be.a('boolean');
              // expect(data.isAwaiting).to.be(false);
              expect(data.lyrics).to.be.a('string');
              // expect(data.lyrics).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.TagDTO);
                  expect(data.id).to.be.a('number');
                  // expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  // expect(data.name).to.be("");
                }
              }
              expect(data.title).to.be.a('string');
              // expect(data.title).to.be("");
              expect(data.trivia).to.be.a('string');
              // expect(data.trivia).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByCategoryUsingGET', function() {
        it('should call getByCategoryUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getByCategoryUsingGET call and complete the assertions
          /*
          var categoryId = 789;
          var opts = {};
          opts.limit = 56;

          instance.getByCategoryUsingGET(categoryId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.SongDTO);
              expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                    expect(data.addedBy.addedBy).to.be.a('number');
                // expect(data.addedBy.addedBy).to.be("0");
                expect(data.addedBy.addedSong).to.be.a('number');
                // expect(data.addedBy.addedSong).to.be("0");
                expect(data.addedBy.id).to.be.a('number');
                // expect(data.addedBy.id).to.be("0");
                expect(data.addedBy.timestamp).to.be.a(Date);
                // expect(data.addedBy.timestamp).to.be(new Date());
              expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                    expect(data.author.id).to.be.a('number');
                // expect(data.author.id).to.be("0");
                expect(data.author.name).to.be.a('string');
                // expect(data.author.name).to.be("");
              expect(data.averageRating).to.be.a('number');
              // expect(data.averageRating).to.be();
              expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                    expect(data.category.id).to.be.a('number');
                // expect(data.category.id).to.be("0");
                expect(data.category.name).to.be.a('string');
                // expect(data.category.name).to.be("");
              {
                let dataCtr = data.coauthors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                  expect(data.authorId).to.be.a('number');
                  // expect(data.authorId).to.be("0");
                  expect(data.coauthorFunction).to.be.a('string');
                  // expect(data.coauthorFunction).to.be("MUSIC");
                  expect(data.songId).to.be.a('number');
                  // expect(data.songId).to.be("0");
                }
              }
              {
                let dataCtr = data.edits;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongEditDTO);
                  expect(data.editedBy).to.be.a('number');
                  // expect(data.editedBy).to.be("0");
                  expect(data.editedSong).to.be.a('number');
                  // expect(data.editedSong).to.be("0");
                  expect(data.id).to.be.a('number');
                  // expect(data.id).to.be("0");
                  expect(data.timestamp).to.be.a(Date);
                  // expect(data.timestamp).to.be(new Date());
                }
              }
              expect(data.guitarTabs).to.be.a('string');
              // expect(data.guitarTabs).to.be("");
              expect(data.id).to.be.a('number');
              // expect(data.id).to.be("0");
              expect(data.isAwaiting).to.be.a('boolean');
              // expect(data.isAwaiting).to.be(false);
              expect(data.lyrics).to.be.a('string');
              // expect(data.lyrics).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.TagDTO);
                  expect(data.id).to.be.a('number');
                  // expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  // expect(data.name).to.be("");
                }
              }
              expect(data.title).to.be.a('string');
              // expect(data.title).to.be("");
              expect(data.trivia).to.be.a('string');
              // expect(data.trivia).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByIdUsingGET1', function() {
        it('should call getByIdUsingGET1 successfully', function(done) {
          // TODO: uncomment, update parameter values for getByIdUsingGET1 call and complete the assertions
          /*
          var id = 789;

          instance.getByIdUsingGET1(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.SongDTO);
            expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                  expect(data.addedBy.addedBy).to.be.a('number');
              // expect(data.addedBy.addedBy).to.be("0");
              expect(data.addedBy.addedSong).to.be.a('number');
              // expect(data.addedBy.addedSong).to.be("0");
              expect(data.addedBy.id).to.be.a('number');
              // expect(data.addedBy.id).to.be("0");
              expect(data.addedBy.timestamp).to.be.a(Date);
              // expect(data.addedBy.timestamp).to.be(new Date());
            expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                  expect(data.author.id).to.be.a('number');
              // expect(data.author.id).to.be("0");
              expect(data.author.name).to.be.a('string');
              // expect(data.author.name).to.be("");
            expect(data.averageRating).to.be.a('number');
            // expect(data.averageRating).to.be();
            expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                  expect(data.category.id).to.be.a('number');
              // expect(data.category.id).to.be("0");
              expect(data.category.name).to.be.a('string');
              // expect(data.category.name).to.be("");
            {
              let dataCtr = data.coauthors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                expect(data.authorId).to.be.a('number');
                // expect(data.authorId).to.be("0");
                expect(data.coauthorFunction).to.be.a('string');
                // expect(data.coauthorFunction).to.be("MUSIC");
                expect(data.songId).to.be.a('number');
                // expect(data.songId).to.be("0");
              }
            }
            {
              let dataCtr = data.edits;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongEditDTO);
                expect(data.editedBy).to.be.a('number');
                // expect(data.editedBy).to.be("0");
                expect(data.editedSong).to.be.a('number');
                // expect(data.editedSong).to.be("0");
                expect(data.id).to.be.a('number');
                // expect(data.id).to.be("0");
                expect(data.timestamp).to.be.a(Date);
                // expect(data.timestamp).to.be(new Date());
              }
            }
            expect(data.guitarTabs).to.be.a('string');
            // expect(data.guitarTabs).to.be("");
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be("0");
            expect(data.isAwaiting).to.be.a('boolean');
            // expect(data.isAwaiting).to.be(false);
            expect(data.lyrics).to.be.a('string');
            // expect(data.lyrics).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.TagDTO);
                expect(data.id).to.be.a('number');
                // expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                // expect(data.name).to.be("");
              }
            }
            expect(data.title).to.be.a('string');
            // expect(data.title).to.be("");
            expect(data.trivia).to.be.a('string');
            // expect(data.trivia).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByLyricsFragmentUsingGET', function() {
        it('should call getByLyricsFragmentUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getByLyricsFragmentUsingGET call and complete the assertions
          /*
          var value = "value_example";
          var opts = {};
          opts.limit = 56;

          instance.getByLyricsFragmentUsingGET(value, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.SongDTO);
              expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                    expect(data.addedBy.addedBy).to.be.a('number');
                // expect(data.addedBy.addedBy).to.be("0");
                expect(data.addedBy.addedSong).to.be.a('number');
                // expect(data.addedBy.addedSong).to.be("0");
                expect(data.addedBy.id).to.be.a('number');
                // expect(data.addedBy.id).to.be("0");
                expect(data.addedBy.timestamp).to.be.a(Date);
                // expect(data.addedBy.timestamp).to.be(new Date());
              expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                    expect(data.author.id).to.be.a('number');
                // expect(data.author.id).to.be("0");
                expect(data.author.name).to.be.a('string');
                // expect(data.author.name).to.be("");
              expect(data.averageRating).to.be.a('number');
              // expect(data.averageRating).to.be();
              expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                    expect(data.category.id).to.be.a('number');
                // expect(data.category.id).to.be("0");
                expect(data.category.name).to.be.a('string');
                // expect(data.category.name).to.be("");
              {
                let dataCtr = data.coauthors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                  expect(data.authorId).to.be.a('number');
                  // expect(data.authorId).to.be("0");
                  expect(data.coauthorFunction).to.be.a('string');
                  // expect(data.coauthorFunction).to.be("MUSIC");
                  expect(data.songId).to.be.a('number');
                  // expect(data.songId).to.be("0");
                }
              }
              {
                let dataCtr = data.edits;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongEditDTO);
                  expect(data.editedBy).to.be.a('number');
                  // expect(data.editedBy).to.be("0");
                  expect(data.editedSong).to.be.a('number');
                  // expect(data.editedSong).to.be("0");
                  expect(data.id).to.be.a('number');
                  // expect(data.id).to.be("0");
                  expect(data.timestamp).to.be.a(Date);
                  // expect(data.timestamp).to.be(new Date());
                }
              }
              expect(data.guitarTabs).to.be.a('string');
              // expect(data.guitarTabs).to.be("");
              expect(data.id).to.be.a('number');
              // expect(data.id).to.be("0");
              expect(data.isAwaiting).to.be.a('boolean');
              // expect(data.isAwaiting).to.be(false);
              expect(data.lyrics).to.be.a('string');
              // expect(data.lyrics).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.TagDTO);
                  expect(data.id).to.be.a('number');
                  // expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  // expect(data.name).to.be("");
                }
              }
              expect(data.title).to.be.a('string');
              // expect(data.title).to.be("");
              expect(data.trivia).to.be.a('string');
              // expect(data.trivia).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByTagUsingGET', function() {
        it('should call getByTagUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getByTagUsingGET call and complete the assertions
          /*
          var tagId = 789;
          var opts = {};
          opts.limit = 56;

          instance.getByTagUsingGET(tagId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.SongDTO);
              expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                    expect(data.addedBy.addedBy).to.be.a('number');
                // expect(data.addedBy.addedBy).to.be("0");
                expect(data.addedBy.addedSong).to.be.a('number');
                // expect(data.addedBy.addedSong).to.be("0");
                expect(data.addedBy.id).to.be.a('number');
                // expect(data.addedBy.id).to.be("0");
                expect(data.addedBy.timestamp).to.be.a(Date);
                // expect(data.addedBy.timestamp).to.be(new Date());
              expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                    expect(data.author.id).to.be.a('number');
                // expect(data.author.id).to.be("0");
                expect(data.author.name).to.be.a('string');
                // expect(data.author.name).to.be("");
              expect(data.averageRating).to.be.a('number');
              // expect(data.averageRating).to.be();
              expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                    expect(data.category.id).to.be.a('number');
                // expect(data.category.id).to.be("0");
                expect(data.category.name).to.be.a('string');
                // expect(data.category.name).to.be("");
              {
                let dataCtr = data.coauthors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                  expect(data.authorId).to.be.a('number');
                  // expect(data.authorId).to.be("0");
                  expect(data.coauthorFunction).to.be.a('string');
                  // expect(data.coauthorFunction).to.be("MUSIC");
                  expect(data.songId).to.be.a('number');
                  // expect(data.songId).to.be("0");
                }
              }
              {
                let dataCtr = data.edits;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongEditDTO);
                  expect(data.editedBy).to.be.a('number');
                  // expect(data.editedBy).to.be("0");
                  expect(data.editedSong).to.be.a('number');
                  // expect(data.editedSong).to.be("0");
                  expect(data.id).to.be.a('number');
                  // expect(data.id).to.be("0");
                  expect(data.timestamp).to.be.a(Date);
                  // expect(data.timestamp).to.be(new Date());
                }
              }
              expect(data.guitarTabs).to.be.a('string');
              // expect(data.guitarTabs).to.be("");
              expect(data.id).to.be.a('number');
              // expect(data.id).to.be("0");
              expect(data.isAwaiting).to.be.a('boolean');
              // expect(data.isAwaiting).to.be(false);
              expect(data.lyrics).to.be.a('string');
              // expect(data.lyrics).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.TagDTO);
                  expect(data.id).to.be.a('number');
                  // expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  // expect(data.name).to.be("");
                }
              }
              expect(data.title).to.be.a('string');
              // expect(data.title).to.be("");
              expect(data.trivia).to.be.a('string');
              // expect(data.trivia).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByTitleFragmentUsingGET', function() {
        it('should call getByTitleFragmentUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getByTitleFragmentUsingGET call and complete the assertions
          /*
          var title = "title_example";
          var opts = {};
          opts.limit = 56;

          instance.getByTitleFragmentUsingGET(title, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.SongDTO);
              expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                    expect(data.addedBy.addedBy).to.be.a('number');
                // expect(data.addedBy.addedBy).to.be("0");
                expect(data.addedBy.addedSong).to.be.a('number');
                // expect(data.addedBy.addedSong).to.be("0");
                expect(data.addedBy.id).to.be.a('number');
                // expect(data.addedBy.id).to.be("0");
                expect(data.addedBy.timestamp).to.be.a(Date);
                // expect(data.addedBy.timestamp).to.be(new Date());
              expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                    expect(data.author.id).to.be.a('number');
                // expect(data.author.id).to.be("0");
                expect(data.author.name).to.be.a('string');
                // expect(data.author.name).to.be("");
              expect(data.averageRating).to.be.a('number');
              // expect(data.averageRating).to.be();
              expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                    expect(data.category.id).to.be.a('number');
                // expect(data.category.id).to.be("0");
                expect(data.category.name).to.be.a('string');
                // expect(data.category.name).to.be("");
              {
                let dataCtr = data.coauthors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                  expect(data.authorId).to.be.a('number');
                  // expect(data.authorId).to.be("0");
                  expect(data.coauthorFunction).to.be.a('string');
                  // expect(data.coauthorFunction).to.be("MUSIC");
                  expect(data.songId).to.be.a('number');
                  // expect(data.songId).to.be("0");
                }
              }
              {
                let dataCtr = data.edits;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongEditDTO);
                  expect(data.editedBy).to.be.a('number');
                  // expect(data.editedBy).to.be("0");
                  expect(data.editedSong).to.be.a('number');
                  // expect(data.editedSong).to.be("0");
                  expect(data.id).to.be.a('number');
                  // expect(data.id).to.be("0");
                  expect(data.timestamp).to.be.a(Date);
                  // expect(data.timestamp).to.be(new Date());
                }
              }
              expect(data.guitarTabs).to.be.a('string');
              // expect(data.guitarTabs).to.be("");
              expect(data.id).to.be.a('number');
              // expect(data.id).to.be("0");
              expect(data.isAwaiting).to.be.a('boolean');
              // expect(data.isAwaiting).to.be(false);
              expect(data.lyrics).to.be.a('string');
              // expect(data.lyrics).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.TagDTO);
                  expect(data.id).to.be.a('number');
                  // expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  // expect(data.name).to.be("");
                }
              }
              expect(data.title).to.be.a('string');
              // expect(data.title).to.be("");
              expect(data.trivia).to.be.a('string');
              // expect(data.trivia).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLatestUsingGET', function() {
        it('should call getLatestUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getLatestUsingGET call and complete the assertions
          /*
          var limit = 56;

          instance.getLatestUsingGET(limit, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.SongDTO);
              expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                    expect(data.addedBy.addedBy).to.be.a('number');
                // expect(data.addedBy.addedBy).to.be("0");
                expect(data.addedBy.addedSong).to.be.a('number');
                // expect(data.addedBy.addedSong).to.be("0");
                expect(data.addedBy.id).to.be.a('number');
                // expect(data.addedBy.id).to.be("0");
                expect(data.addedBy.timestamp).to.be.a(Date);
                // expect(data.addedBy.timestamp).to.be(new Date());
              expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                    expect(data.author.id).to.be.a('number');
                // expect(data.author.id).to.be("0");
                expect(data.author.name).to.be.a('string');
                // expect(data.author.name).to.be("");
              expect(data.averageRating).to.be.a('number');
              // expect(data.averageRating).to.be();
              expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                    expect(data.category.id).to.be.a('number');
                // expect(data.category.id).to.be("0");
                expect(data.category.name).to.be.a('string');
                // expect(data.category.name).to.be("");
              {
                let dataCtr = data.coauthors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                  expect(data.authorId).to.be.a('number');
                  // expect(data.authorId).to.be("0");
                  expect(data.coauthorFunction).to.be.a('string');
                  // expect(data.coauthorFunction).to.be("MUSIC");
                  expect(data.songId).to.be.a('number');
                  // expect(data.songId).to.be("0");
                }
              }
              {
                let dataCtr = data.edits;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongEditDTO);
                  expect(data.editedBy).to.be.a('number');
                  // expect(data.editedBy).to.be("0");
                  expect(data.editedSong).to.be.a('number');
                  // expect(data.editedSong).to.be("0");
                  expect(data.id).to.be.a('number');
                  // expect(data.id).to.be("0");
                  expect(data.timestamp).to.be.a(Date);
                  // expect(data.timestamp).to.be(new Date());
                }
              }
              expect(data.guitarTabs).to.be.a('string');
              // expect(data.guitarTabs).to.be("");
              expect(data.id).to.be.a('number');
              // expect(data.id).to.be("0");
              expect(data.isAwaiting).to.be.a('boolean');
              // expect(data.isAwaiting).to.be(false);
              expect(data.lyrics).to.be.a('string');
              // expect(data.lyrics).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.TagDTO);
                  expect(data.id).to.be.a('number');
                  // expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  // expect(data.name).to.be("");
                }
              }
              expect(data.title).to.be.a('string');
              // expect(data.title).to.be("");
              expect(data.trivia).to.be.a('string');
              // expect(data.trivia).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
