/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SongbookApi);
  }
}(this, function(expect, SongbookApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SongbookApi.PlaylistResourceApi();
  });

  describe('(package)', function() {
    describe('PlaylistResourceApi', function() {
      describe('addSongUsingPATCH', function() {
        it('should call addSongUsingPATCH successfully', function(done) {
          // TODO: uncomment, update parameter values for addSongUsingPATCH call
          /*
          var id = 789;
          var songId = 789;

          instance.addSongUsingPATCH(id, songId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createUsingPOST2', function() {
        it('should call createUsingPOST2 successfully', function(done) {
          // TODO: uncomment, update parameter values for createUsingPOST2 call and complete the assertions
          /*
          var dto = new SongbookApi.CreatePlaylistDTO();
          dto.isPrivate = false;
          dto.name = "";
          dto.songs = ["0"];

          instance.createUsingPOST2(dto, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.PlaylistDTO);
            expect(data.creationTime).to.be.a(Date);
            // expect(data.creationTime).to.be(new Date());
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be("0");
            expect(data.isPrivate).to.be.a('boolean');
            // expect(data.isPrivate).to.be(false);
            expect(data.name).to.be.a('string');
            // expect(data.name).to.be("");
            expect(data.ownerId).to.be.a('number');
            // expect(data.ownerId).to.be("0");
            {
              let dataCtr = data.songs;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                // expect(data).to.be("0");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteUsingDELETE2', function() {
        it('should call deleteUsingDELETE2 successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteUsingDELETE2 call
          /*
          var id = 789;

          instance.deleteUsingDELETE2(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('downloadPlaylistPdfSongbookUsingGET', function() {
        it('should call downloadPlaylistPdfSongbookUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for downloadPlaylistPdfSongbookUsingGET call and complete the assertions
          /*
          var id = 789;

          instance.downloadPlaylistPdfSongbookUsingGET(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.Resource);
            expect(data.description).to.be.a('string');
            // expect(data.description).to.be("");
            expect(data.file).to.be.a(File);
            // expect(data.file).to.be();
            expect(data.filename).to.be.a('string');
            // expect(data.filename).to.be("");
            expect(data.inputStream).to.be.a(SongbookApi.InputStream);
                expect(data.open).to.be.a('boolean');
            // expect(data.open).to.be(false);
            expect(data.readable).to.be.a('boolean');
            // expect(data.readable).to.be(false);
            expect(data.uri).to.be.a(SongbookApi.URI);
                  expect(data.uri.absolute).to.be.a('boolean');
              // expect(data.uri.absolute).to.be(false);
              expect(data.uri.authority).to.be.a('string');
              // expect(data.uri.authority).to.be("");
              expect(data.uri.fragment).to.be.a('string');
              // expect(data.uri.fragment).to.be("");
              expect(data.uri.host).to.be.a('string');
              // expect(data.uri.host).to.be("");
              expect(data.uri.opaque).to.be.a('boolean');
              // expect(data.uri.opaque).to.be(false);
              expect(data.uri.path).to.be.a('string');
              // expect(data.uri.path).to.be("");
              expect(data.uri.port).to.be.a('number');
              // expect(data.uri.port).to.be(0);
              expect(data.uri.query).to.be.a('string');
              // expect(data.uri.query).to.be("");
              expect(data.uri.rawAuthority).to.be.a('string');
              // expect(data.uri.rawAuthority).to.be("");
              expect(data.uri.rawFragment).to.be.a('string');
              // expect(data.uri.rawFragment).to.be("");
              expect(data.uri.rawPath).to.be.a('string');
              // expect(data.uri.rawPath).to.be("");
              expect(data.uri.rawQuery).to.be.a('string');
              // expect(data.uri.rawQuery).to.be("");
              expect(data.uri.rawSchemeSpecificPart).to.be.a('string');
              // expect(data.uri.rawSchemeSpecificPart).to.be("");
              expect(data.uri.rawUserInfo).to.be.a('string');
              // expect(data.uri.rawUserInfo).to.be("");
              expect(data.uri.scheme).to.be.a('string');
              // expect(data.uri.scheme).to.be("");
              expect(data.uri.schemeSpecificPart).to.be.a('string');
              // expect(data.uri.schemeSpecificPart).to.be("");
              expect(data.uri.userInfo).to.be.a('string');
              // expect(data.uri.userInfo).to.be("");
            expect(data.url).to.be.a(SongbookApi.URL);
                  expect(data.url.authority).to.be.a('string');
              // expect(data.url.authority).to.be("");
              expect(data.url.content).to.be.a(Object);
              // expect(data.url.content).to.be();
              expect(data.url.defaultPort).to.be.a('number');
              // expect(data.url.defaultPort).to.be(0);
              expect(data.url.file).to.be.a('string');
              // expect(data.url.file).to.be("");
              expect(data.url.host).to.be.a('string');
              // expect(data.url.host).to.be("");
              expect(data.url.path).to.be.a('string');
              // expect(data.url.path).to.be("");
              expect(data.url.port).to.be.a('number');
              // expect(data.url.port).to.be(0);
              expect(data.url.protocol).to.be.a('string');
              // expect(data.url.protocol).to.be("");
              expect(data.url.query).to.be.a('string');
              // expect(data.url.query).to.be("");
              expect(data.url.ref).to.be.a('string');
              // expect(data.url.ref).to.be("");
              expect(data.url.userInfo).to.be.a('string');
              // expect(data.url.userInfo).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllUsingGET3', function() {
        it('should call getAllUsingGET3 successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllUsingGET3 call and complete the assertions
          /*
          var opts = {};
          opts.includePrivate = false;
          opts.limit = 56;

          instance.getAllUsingGET3(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.PlaylistDTO);
              expect(data.creationTime).to.be.a(Date);
              // expect(data.creationTime).to.be(new Date());
              expect(data.id).to.be.a('number');
              // expect(data.id).to.be("0");
              expect(data.isPrivate).to.be.a('boolean');
              // expect(data.isPrivate).to.be(false);
              expect(data.name).to.be.a('string');
              // expect(data.name).to.be("");
              expect(data.ownerId).to.be.a('number');
              // expect(data.ownerId).to.be("0");
              {
                let dataCtr = data.songs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  // expect(data).to.be("0");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByIdUsingGET3', function() {
        it('should call getByIdUsingGET3 successfully', function(done) {
          // TODO: uncomment, update parameter values for getByIdUsingGET3 call and complete the assertions
          /*
          var id = 789;

          instance.getByIdUsingGET3(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.PlaylistDTO);
            expect(data.creationTime).to.be.a(Date);
            // expect(data.creationTime).to.be(new Date());
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be("0");
            expect(data.isPrivate).to.be.a('boolean');
            // expect(data.isPrivate).to.be(false);
            expect(data.name).to.be.a('string');
            // expect(data.name).to.be("");
            expect(data.ownerId).to.be.a('number');
            // expect(data.ownerId).to.be("0");
            {
              let dataCtr = data.songs;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                // expect(data).to.be("0");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByNameUsingGET1', function() {
        it('should call getByNameUsingGET1 successfully', function(done) {
          // TODO: uncomment, update parameter values for getByNameUsingGET1 call and complete the assertions
          /*
          var name = "name_example";
          var opts = {};
          opts.includePrivate = false;
          opts.limit = 56;

          instance.getByNameUsingGET1(name, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.PlaylistDTO);
              expect(data.creationTime).to.be.a(Date);
              // expect(data.creationTime).to.be(new Date());
              expect(data.id).to.be.a('number');
              // expect(data.id).to.be("0");
              expect(data.isPrivate).to.be.a('boolean');
              // expect(data.isPrivate).to.be(false);
              expect(data.name).to.be.a('string');
              // expect(data.name).to.be("");
              expect(data.ownerId).to.be.a('number');
              // expect(data.ownerId).to.be("0");
              {
                let dataCtr = data.songs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  // expect(data).to.be("0");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByOwnerIdUsingGET', function() {
        it('should call getByOwnerIdUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getByOwnerIdUsingGET call and complete the assertions
          /*
          var id = 789;
          var opts = {};
          opts.includePrivate = false;

          instance.getByOwnerIdUsingGET(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.PlaylistDTO);
              expect(data.creationTime).to.be.a(Date);
              // expect(data.creationTime).to.be(new Date());
              expect(data.id).to.be.a('number');
              // expect(data.id).to.be("0");
              expect(data.isPrivate).to.be.a('boolean');
              // expect(data.isPrivate).to.be(false);
              expect(data.name).to.be.a('string');
              // expect(data.name).to.be("");
              expect(data.ownerId).to.be.a('number');
              // expect(data.ownerId).to.be("0");
              {
                let dataCtr = data.songs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  // expect(data).to.be("0");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeSongUsingPATCH', function() {
        it('should call removeSongUsingPATCH successfully', function(done) {
          // TODO: uncomment, update parameter values for removeSongUsingPATCH call
          /*
          var id = 789;
          var songId = 789;

          instance.removeSongUsingPATCH(id, songId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateUsingPUT2', function() {
        it('should call updateUsingPUT2 successfully', function(done) {
          // TODO: uncomment, update parameter values for updateUsingPUT2 call and complete the assertions
          /*
          var dto = new SongbookApi.PlaylistDTO();
          dto.creationTime = new Date();
          dto.id = "0";
          dto.isPrivate = false;
          dto.name = "";
          dto.ownerId = "0";
          dto.songs = ["0"];

          instance.updateUsingPUT2(dto, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.PlaylistDTO);
            expect(data.creationTime).to.be.a(Date);
            // expect(data.creationTime).to.be(new Date());
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be("0");
            expect(data.isPrivate).to.be.a('boolean');
            // expect(data.isPrivate).to.be(false);
            expect(data.name).to.be.a('string');
            // expect(data.name).to.be("");
            expect(data.ownerId).to.be.a('number');
            // expect(data.ownerId).to.be("0");
            {
              let dataCtr = data.songs;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                // expect(data).to.be("0");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
