/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SongbookApi);
  }
}(this, function(expect, SongbookApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SongbookApi.UserResourceApi();
  });

  describe('(package)', function() {
    describe('UserResourceApi', function() {
      describe('addSongToLibraryUsingPATCH', function() {
        it('should call addSongToLibraryUsingPATCH successfully', function(done) {
          // TODO: uncomment, update parameter values for addSongToLibraryUsingPATCH call
          /*
          var id = 789;
          var songId = 789;

          instance.addSongToLibraryUsingPATCH(id, songId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteUsingDELETE6', function() {
        it('should call deleteUsingDELETE6 successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteUsingDELETE6 call
          /*
          var id = 789;

          instance.deleteUsingDELETE6(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllUsingGET6', function() {
        it('should call getAllUsingGET6 successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllUsingGET6 call and complete the assertions
          /*
          var opts = {};
          opts.limit = 56;

          instance.getAllUsingGET6(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.UserDTO);
              expect(data.activated).to.be.a('boolean');
              expect(data.activated).to.be(false);
              expect(data.email).to.be.a('string');
              expect(data.email).to.be("");
              expect(data.firstName).to.be.a('string');
              expect(data.firstName).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.imageUrl).to.be.a('string');
              expect(data.imageUrl).to.be("");
              expect(data.lastName).to.be.a('string');
              expect(data.lastName).to.be("");
              expect(data.registrationDate).to.be.a(Date);
              expect(data.registrationDate).to.be(new Date());
              {
                let dataCtr = data.songs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be("0");
                }
              }
              expect(data.userRoleId).to.be.a('number');
              expect(data.userRoleId).to.be("0");
              expect(data.username).to.be.a('string');
              expect(data.username).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByIdUsingGET6', function() {
        it('should call getByIdUsingGET6 successfully', function(done) {
          // TODO: uncomment, update parameter values for getByIdUsingGET6 call and complete the assertions
          /*
          var id = 789;

          instance.getByIdUsingGET6(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.UserDTO);
            expect(data.activated).to.be.a('boolean');
            expect(data.activated).to.be(false);
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.imageUrl).to.be.a('string');
            expect(data.imageUrl).to.be("");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("");
            expect(data.registrationDate).to.be.a(Date);
            expect(data.registrationDate).to.be(new Date());
            {
              let dataCtr = data.songs;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be("0");
              }
            }
            expect(data.userRoleId).to.be.a('number');
            expect(data.userRoleId).to.be("0");
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPlaylistsByUserIdUsingGET', function() {
        it('should call getPlaylistsByUserIdUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getPlaylistsByUserIdUsingGET call and complete the assertions
          /*
          var id = 789;

          instance.getPlaylistsByUserIdUsingGET(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.PlaylistDTO);
              expect(data.creationTime).to.be.a(Date);
              expect(data.creationTime).to.be(new Date());
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.isPrivate).to.be.a('boolean');
              expect(data.isPrivate).to.be(false);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.ownerId).to.be.a('number');
              expect(data.ownerId).to.be("0");
              {
                let dataCtr = data.songs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be("0");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRatingsByUserIdUsingGET', function() {
        it('should call getRatingsByUserIdUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getRatingsByUserIdUsingGET call and complete the assertions
          /*
          var id = 789;

          instance.getRatingsByUserIdUsingGET(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.UserSongRatingDTO);
              expect(data.rating).to.be.a('number');
              expect(data.rating).to.be();
              expect(data.songId).to.be.a('number');
              expect(data.songId).to.be("0");
              expect(data.userId).to.be.a('number');
              expect(data.userId).to.be("0");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeSongFromLibraryUsingPATCH', function() {
        it('should call removeSongFromLibraryUsingPATCH successfully', function(done) {
          // TODO: uncomment, update parameter values for removeSongFromLibraryUsingPATCH call
          /*
          var id = 789;
          var songId = 789;

          instance.removeSongFromLibraryUsingPATCH(id, songId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
