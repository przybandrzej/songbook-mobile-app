/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SongbookApi);
  }
}(this, function(expect, SongbookApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SongbookApi.VerseResourceApi();
  });

  describe('(package)', function() {
    describe('VerseResourceApi', function() {
      describe('addLineUsingPATCH', function() {
        it('should call addLineUsingPATCH successfully', function(done) {
          // TODO: uncomment, update parameter values for addLineUsingPATCH call
          /*
          var id = 789;
          var line = new SongbookApi.CreateLineDTO();
          line.order = "0";
          line.content = "";
          line.cords = [new SongbookApi.CreateGuitarCordDTO()];
          line.cords[0].content = "";
          line.cords[0].position = 0;

          instance.addLineUsingPATCH(id, line, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllVersesUsingGET', function() {
        it('should call getAllVersesUsingGET successfully', function(done) {
          // TODO: uncomment getAllVersesUsingGET call and complete the assertions
          /*

          instance.getAllVersesUsingGET(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.VerseDTO);
              expect(data.chorus).to.be.a('boolean');
              // expect(data.chorus).to.be(false);
              expect(data.id).to.be.a('number');
              // expect(data.id).to.be("0");
              expect(data.order).to.be.a('number');
              // expect(data.order).to.be("0");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getVerseByIdUsingGET', function() {
        it('should call getVerseByIdUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getVerseByIdUsingGET call and complete the assertions
          /*
          var id = 789;

          instance.getVerseByIdUsingGET(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.VerseDTO);
            expect(data.chorus).to.be.a('boolean');
            // expect(data.chorus).to.be(false);
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be("0");
            expect(data.order).to.be.a('number');
            // expect(data.order).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getVerseLinesUsingGET', function() {
        it('should call getVerseLinesUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getVerseLinesUsingGET call and complete the assertions
          /*
          var id = 789;

          instance.getVerseLinesUsingGET(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.LineDTO);
              expect(data.content).to.be.a('string');
              // expect(data.content).to.be("");
              expect(data.id).to.be.a('number');
              // expect(data.id).to.be("0");
              expect(data.order).to.be.a('number');
              // expect(data.order).to.be("0");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeLineUsingPATCH', function() {
        it('should call removeLineUsingPATCH successfully', function(done) {
          // TODO: uncomment, update parameter values for removeLineUsingPATCH call
          /*
          var id = 789;
          var lineId = 789;

          instance.removeLineUsingPATCH(id, lineId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateVerseUsingPUT', function() {
        it('should call updateVerseUsingPUT successfully', function(done) {
          // TODO: uncomment, update parameter values for updateVerseUsingPUT call and complete the assertions
          /*
          var verseDTO = new SongbookApi.VerseDTO();
          verseDTO.chorus = false;
          verseDTO.id = "0";
          verseDTO.order = "0";

          instance.updateVerseUsingPUT(verseDTO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.VerseDTO);
            expect(data.chorus).to.be.a('boolean');
            // expect(data.chorus).to.be(false);
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be("0");
            expect(data.order).to.be.a('number');
            // expect(data.order).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
