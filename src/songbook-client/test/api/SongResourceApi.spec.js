/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SongbookApi);
  }
}(this, function(expect, SongbookApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SongbookApi.SongResourceApi();
  });

  describe('(package)', function() {
    describe('SongResourceApi', function() {
      describe('addTagToSongUsingPATCH', function() {
        it('should call addTagToSongUsingPATCH successfully', function(done) {
          // TODO: uncomment, update parameter values for addTagToSongUsingPATCH call and complete the assertions
          /*
          var id = 789;
          var tag = new SongbookApi.UniversalCreateDTO();
          tag.id = "0";
          tag.name = "";

          instance.addTagToSongUsingPATCH(id, tag, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.SongDTO);
            expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                  expect(data.addedBy.addedBy).to.be.a('number');
              expect(data.addedBy.addedBy).to.be("0");
              expect(data.addedBy.addedSong).to.be.a('number');
              expect(data.addedBy.addedSong).to.be("0");
              expect(data.addedBy.id).to.be.a('number');
              expect(data.addedBy.id).to.be("0");
              expect(data.addedBy.timestamp).to.be.a(Date);
              expect(data.addedBy.timestamp).to.be(new Date());
            expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                  expect(data.author.id).to.be.a('number');
              expect(data.author.id).to.be("0");
              expect(data.author.name).to.be.a('string');
              expect(data.author.name).to.be("");
            expect(data.averageRating).to.be.a('number');
            expect(data.averageRating).to.be();
            expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                  expect(data.category.id).to.be.a('number');
              expect(data.category.id).to.be("0");
              expect(data.category.name).to.be.a('string');
              expect(data.category.name).to.be("");
            {
              let dataCtr = data.coauthors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                expect(data.authorId).to.be.a('number');
                expect(data.authorId).to.be("0");
                expect(data.coauthorFunction).to.be.a('string');
                expect(data.coauthorFunction).to.be("MUSIC");
                expect(data.songId).to.be.a('number');
                expect(data.songId).to.be("0");

                      }
            }
            {
              let dataCtr = data.edits;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongEditDTO);
                expect(data.editedBy).to.be.a('number');
                expect(data.editedBy).to.be("0");
                expect(data.editedSong).to.be.a('number');
                expect(data.editedSong).to.be("0");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.timestamp).to.be.a(Date);
                expect(data.timestamp).to.be(new Date());

                      }
            }
            expect(data.guitarTabs).to.be.a('string');
            expect(data.guitarTabs).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.isAwaiting).to.be.a('boolean');
            expect(data.isAwaiting).to.be(false);
            expect(data.lyrics).to.be.a('string');
            expect(data.lyrics).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.TagDTO);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.trivia).to.be.a('string');
            expect(data.trivia).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('addTagsToSongBulkUsingPATCH', function() {
        it('should call addTagsToSongBulkUsingPATCH successfully', function(done) {
          // TODO: uncomment, update parameter values for addTagsToSongBulkUsingPATCH call and complete the assertions
          /*
          var id = 789;
          var tags = [new SongbookApi.UniversalCreateDTO()];
          tags[0].id = "0";
          tags[0].name = "";

          instance.addTagsToSongBulkUsingPATCH(id, tags, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.SongDTO);
            expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                  expect(data.addedBy.addedBy).to.be.a('number');
              expect(data.addedBy.addedBy).to.be("0");
              expect(data.addedBy.addedSong).to.be.a('number');
              expect(data.addedBy.addedSong).to.be("0");
              expect(data.addedBy.id).to.be.a('number');
              expect(data.addedBy.id).to.be("0");
              expect(data.addedBy.timestamp).to.be.a(Date);
              expect(data.addedBy.timestamp).to.be(new Date());
            expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                  expect(data.author.id).to.be.a('number');
              expect(data.author.id).to.be("0");
              expect(data.author.name).to.be.a('string');
              expect(data.author.name).to.be("");
            expect(data.averageRating).to.be.a('number');
            expect(data.averageRating).to.be();
            expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                  expect(data.category.id).to.be.a('number');
              expect(data.category.id).to.be("0");
              expect(data.category.name).to.be.a('string');
              expect(data.category.name).to.be("");
            {
              let dataCtr = data.coauthors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                expect(data.authorId).to.be.a('number');
                expect(data.authorId).to.be("0");
                expect(data.coauthorFunction).to.be.a('string');
                expect(data.coauthorFunction).to.be("MUSIC");
                expect(data.songId).to.be.a('number');
                expect(data.songId).to.be("0");

                      }
            }
            {
              let dataCtr = data.edits;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongEditDTO);
                expect(data.editedBy).to.be.a('number');
                expect(data.editedBy).to.be("0");
                expect(data.editedSong).to.be.a('number');
                expect(data.editedSong).to.be("0");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.timestamp).to.be.a(Date);
                expect(data.timestamp).to.be(new Date());

                      }
            }
            expect(data.guitarTabs).to.be.a('string');
            expect(data.guitarTabs).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.isAwaiting).to.be.a('boolean');
            expect(data.isAwaiting).to.be(false);
            expect(data.lyrics).to.be.a('string');
            expect(data.lyrics).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.TagDTO);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.trivia).to.be.a('string');
            expect(data.trivia).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('approveSongUsingPUT', function() {
        it('should call approveSongUsingPUT successfully', function(done) {
          // TODO: uncomment, update parameter values for approveSongUsingPUT call and complete the assertions
          /*
          var id = 789;

          instance.approveSongUsingPUT(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.SongDTO);
            expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                  expect(data.addedBy.addedBy).to.be.a('number');
              expect(data.addedBy.addedBy).to.be("0");
              expect(data.addedBy.addedSong).to.be.a('number');
              expect(data.addedBy.addedSong).to.be("0");
              expect(data.addedBy.id).to.be.a('number');
              expect(data.addedBy.id).to.be("0");
              expect(data.addedBy.timestamp).to.be.a(Date);
              expect(data.addedBy.timestamp).to.be(new Date());
            expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                  expect(data.author.id).to.be.a('number');
              expect(data.author.id).to.be("0");
              expect(data.author.name).to.be.a('string');
              expect(data.author.name).to.be("");
            expect(data.averageRating).to.be.a('number');
            expect(data.averageRating).to.be();
            expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                  expect(data.category.id).to.be.a('number');
              expect(data.category.id).to.be("0");
              expect(data.category.name).to.be.a('string');
              expect(data.category.name).to.be("");
            {
              let dataCtr = data.coauthors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                expect(data.authorId).to.be.a('number');
                expect(data.authorId).to.be("0");
                expect(data.coauthorFunction).to.be.a('string');
                expect(data.coauthorFunction).to.be("MUSIC");
                expect(data.songId).to.be.a('number');
                expect(data.songId).to.be("0");

                      }
            }
            {
              let dataCtr = data.edits;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongEditDTO);
                expect(data.editedBy).to.be.a('number');
                expect(data.editedBy).to.be("0");
                expect(data.editedSong).to.be.a('number');
                expect(data.editedSong).to.be("0");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.timestamp).to.be.a(Date);
                expect(data.timestamp).to.be(new Date());

                      }
            }
            expect(data.guitarTabs).to.be.a('string');
            expect(data.guitarTabs).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.isAwaiting).to.be.a('boolean');
            expect(data.isAwaiting).to.be(false);
            expect(data.lyrics).to.be.a('string');
            expect(data.lyrics).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.TagDTO);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.trivia).to.be.a('string');
            expect(data.trivia).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createUsingPOST4', function() {
        it('should call createUsingPOST4 successfully', function(done) {
          // TODO: uncomment, update parameter values for createUsingPOST4 call and complete the assertions
          /*
          var obj = new SongbookApi.CreateSongDTO();
          obj.authorName = "John the band";
          obj.categoryId = "0";
          obj.title = "Rolling in the deep";
          obj.coauthors = [new SongbookApi.CreateCoauthorDTO()];
          obj.coauthors[0].authorName = "";
          obj.coauthors[0].coauthorFunction = "MUSIC";
          obj.lyrics = "";
          obj.guitarTabs = "";
          obj.trivia = "Has written it for his wife.";
          obj.tags = [""];

          instance.createUsingPOST4(obj, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.SongDTO);
            expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                  expect(data.addedBy.addedBy).to.be.a('number');
              expect(data.addedBy.addedBy).to.be("0");
              expect(data.addedBy.addedSong).to.be.a('number');
              expect(data.addedBy.addedSong).to.be("0");
              expect(data.addedBy.id).to.be.a('number');
              expect(data.addedBy.id).to.be("0");
              expect(data.addedBy.timestamp).to.be.a(Date);
              expect(data.addedBy.timestamp).to.be(new Date());
            expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                  expect(data.author.id).to.be.a('number');
              expect(data.author.id).to.be("0");
              expect(data.author.name).to.be.a('string');
              expect(data.author.name).to.be("");
            expect(data.averageRating).to.be.a('number');
            expect(data.averageRating).to.be();
            expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                  expect(data.category.id).to.be.a('number');
              expect(data.category.id).to.be("0");
              expect(data.category.name).to.be.a('string');
              expect(data.category.name).to.be("");
            {
              let dataCtr = data.coauthors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                expect(data.authorId).to.be.a('number');
                expect(data.authorId).to.be("0");
                expect(data.coauthorFunction).to.be.a('string');
                expect(data.coauthorFunction).to.be("MUSIC");
                expect(data.songId).to.be.a('number');
                expect(data.songId).to.be("0");

                      }
            }
            {
              let dataCtr = data.edits;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongEditDTO);
                expect(data.editedBy).to.be.a('number');
                expect(data.editedBy).to.be("0");
                expect(data.editedSong).to.be.a('number');
                expect(data.editedSong).to.be("0");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.timestamp).to.be.a(Date);
                expect(data.timestamp).to.be(new Date());

                      }
            }
            expect(data.guitarTabs).to.be.a('string');
            expect(data.guitarTabs).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.isAwaiting).to.be.a('boolean');
            expect(data.isAwaiting).to.be(false);
            expect(data.lyrics).to.be.a('string');
            expect(data.lyrics).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.TagDTO);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.trivia).to.be.a('string');
            expect(data.trivia).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteUsingDELETE4', function() {
        it('should call deleteUsingDELETE4 successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteUsingDELETE4 call
          /*
          var id = 789;

          instance.deleteUsingDELETE4(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllUsingGET4', function() {
        it('should call getAllUsingGET4 successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllUsingGET4 call and complete the assertions
          /*
          var opts = {};
          opts.includeAwaiting = true;
          opts.limit = 56;

          instance.getAllUsingGET4(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.SongDTO);
              expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                    expect(data.addedBy.addedBy).to.be.a('number');
                expect(data.addedBy.addedBy).to.be("0");
                expect(data.addedBy.addedSong).to.be.a('number');
                expect(data.addedBy.addedSong).to.be("0");
                expect(data.addedBy.id).to.be.a('number');
                expect(data.addedBy.id).to.be("0");
                expect(data.addedBy.timestamp).to.be.a(Date);
                expect(data.addedBy.timestamp).to.be(new Date());
              expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                    expect(data.author.id).to.be.a('number');
                expect(data.author.id).to.be("0");
                expect(data.author.name).to.be.a('string');
                expect(data.author.name).to.be("");
              expect(data.averageRating).to.be.a('number');
              expect(data.averageRating).to.be();
              expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                    expect(data.category.id).to.be.a('number');
                expect(data.category.id).to.be("0");
                expect(data.category.name).to.be.a('string');
                expect(data.category.name).to.be("");
              {
                let dataCtr = data.coauthors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                  expect(data.authorId).to.be.a('number');
                  expect(data.authorId).to.be("0");
                  expect(data.coauthorFunction).to.be.a('string');
                  expect(data.coauthorFunction).to.be("MUSIC");
                  expect(data.songId).to.be.a('number');
                  expect(data.songId).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.edits;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongEditDTO);
                  expect(data.editedBy).to.be.a('number');
                  expect(data.editedBy).to.be("0");
                  expect(data.editedSong).to.be.a('number');
                  expect(data.editedSong).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.timestamp).to.be.a(Date);
                  expect(data.timestamp).to.be(new Date());
  
                        }
              }
              expect(data.guitarTabs).to.be.a('string');
              expect(data.guitarTabs).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.isAwaiting).to.be.a('boolean');
              expect(data.isAwaiting).to.be(false);
              expect(data.lyrics).to.be.a('string');
              expect(data.lyrics).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.TagDTO);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.trivia).to.be.a('string');
              expect(data.trivia).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByAuthorUsingGET', function() {
        it('should call getByAuthorUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getByAuthorUsingGET call and complete the assertions
          /*
          var authorId = 789;
          var opts = {};
          opts.limit = 56;

          instance.getByAuthorUsingGET(authorId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.SongDTO);
              expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                    expect(data.addedBy.addedBy).to.be.a('number');
                expect(data.addedBy.addedBy).to.be("0");
                expect(data.addedBy.addedSong).to.be.a('number');
                expect(data.addedBy.addedSong).to.be("0");
                expect(data.addedBy.id).to.be.a('number');
                expect(data.addedBy.id).to.be("0");
                expect(data.addedBy.timestamp).to.be.a(Date);
                expect(data.addedBy.timestamp).to.be(new Date());
              expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                    expect(data.author.id).to.be.a('number');
                expect(data.author.id).to.be("0");
                expect(data.author.name).to.be.a('string');
                expect(data.author.name).to.be("");
              expect(data.averageRating).to.be.a('number');
              expect(data.averageRating).to.be();
              expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                    expect(data.category.id).to.be.a('number');
                expect(data.category.id).to.be("0");
                expect(data.category.name).to.be.a('string');
                expect(data.category.name).to.be("");
              {
                let dataCtr = data.coauthors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                  expect(data.authorId).to.be.a('number');
                  expect(data.authorId).to.be("0");
                  expect(data.coauthorFunction).to.be.a('string');
                  expect(data.coauthorFunction).to.be("MUSIC");
                  expect(data.songId).to.be.a('number');
                  expect(data.songId).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.edits;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongEditDTO);
                  expect(data.editedBy).to.be.a('number');
                  expect(data.editedBy).to.be("0");
                  expect(data.editedSong).to.be.a('number');
                  expect(data.editedSong).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.timestamp).to.be.a(Date);
                  expect(data.timestamp).to.be(new Date());
  
                        }
              }
              expect(data.guitarTabs).to.be.a('string');
              expect(data.guitarTabs).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.isAwaiting).to.be.a('boolean');
              expect(data.isAwaiting).to.be(false);
              expect(data.lyrics).to.be.a('string');
              expect(data.lyrics).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.TagDTO);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.trivia).to.be.a('string');
              expect(data.trivia).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByCategoryUsingGET1', function() {
        it('should call getByCategoryUsingGET1 successfully', function(done) {
          // TODO: uncomment, update parameter values for getByCategoryUsingGET1 call and complete the assertions
          /*
          var categoryId = 789;
          var opts = {};
          opts.limit = 56;

          instance.getByCategoryUsingGET1(categoryId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.SongDTO);
              expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                    expect(data.addedBy.addedBy).to.be.a('number');
                expect(data.addedBy.addedBy).to.be("0");
                expect(data.addedBy.addedSong).to.be.a('number');
                expect(data.addedBy.addedSong).to.be("0");
                expect(data.addedBy.id).to.be.a('number');
                expect(data.addedBy.id).to.be("0");
                expect(data.addedBy.timestamp).to.be.a(Date);
                expect(data.addedBy.timestamp).to.be(new Date());
              expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                    expect(data.author.id).to.be.a('number');
                expect(data.author.id).to.be("0");
                expect(data.author.name).to.be.a('string');
                expect(data.author.name).to.be("");
              expect(data.averageRating).to.be.a('number');
              expect(data.averageRating).to.be();
              expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                    expect(data.category.id).to.be.a('number');
                expect(data.category.id).to.be("0");
                expect(data.category.name).to.be.a('string');
                expect(data.category.name).to.be("");
              {
                let dataCtr = data.coauthors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                  expect(data.authorId).to.be.a('number');
                  expect(data.authorId).to.be("0");
                  expect(data.coauthorFunction).to.be.a('string');
                  expect(data.coauthorFunction).to.be("MUSIC");
                  expect(data.songId).to.be.a('number');
                  expect(data.songId).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.edits;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongEditDTO);
                  expect(data.editedBy).to.be.a('number');
                  expect(data.editedBy).to.be("0");
                  expect(data.editedSong).to.be.a('number');
                  expect(data.editedSong).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.timestamp).to.be.a(Date);
                  expect(data.timestamp).to.be(new Date());
  
                        }
              }
              expect(data.guitarTabs).to.be.a('string');
              expect(data.guitarTabs).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.isAwaiting).to.be.a('boolean');
              expect(data.isAwaiting).to.be(false);
              expect(data.lyrics).to.be.a('string');
              expect(data.lyrics).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.TagDTO);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.trivia).to.be.a('string');
              expect(data.trivia).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByIdUsingGET4', function() {
        it('should call getByIdUsingGET4 successfully', function(done) {
          // TODO: uncomment, update parameter values for getByIdUsingGET4 call and complete the assertions
          /*
          var id = 789;

          instance.getByIdUsingGET4(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.SongDTO);
            expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                  expect(data.addedBy.addedBy).to.be.a('number');
              expect(data.addedBy.addedBy).to.be("0");
              expect(data.addedBy.addedSong).to.be.a('number');
              expect(data.addedBy.addedSong).to.be("0");
              expect(data.addedBy.id).to.be.a('number');
              expect(data.addedBy.id).to.be("0");
              expect(data.addedBy.timestamp).to.be.a(Date);
              expect(data.addedBy.timestamp).to.be(new Date());
            expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                  expect(data.author.id).to.be.a('number');
              expect(data.author.id).to.be("0");
              expect(data.author.name).to.be.a('string');
              expect(data.author.name).to.be("");
            expect(data.averageRating).to.be.a('number');
            expect(data.averageRating).to.be();
            expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                  expect(data.category.id).to.be.a('number');
              expect(data.category.id).to.be("0");
              expect(data.category.name).to.be.a('string');
              expect(data.category.name).to.be("");
            {
              let dataCtr = data.coauthors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                expect(data.authorId).to.be.a('number');
                expect(data.authorId).to.be("0");
                expect(data.coauthorFunction).to.be.a('string');
                expect(data.coauthorFunction).to.be("MUSIC");
                expect(data.songId).to.be.a('number');
                expect(data.songId).to.be("0");

                      }
            }
            {
              let dataCtr = data.edits;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongEditDTO);
                expect(data.editedBy).to.be.a('number');
                expect(data.editedBy).to.be("0");
                expect(data.editedSong).to.be.a('number');
                expect(data.editedSong).to.be("0");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.timestamp).to.be.a(Date);
                expect(data.timestamp).to.be(new Date());

                      }
            }
            expect(data.guitarTabs).to.be.a('string');
            expect(data.guitarTabs).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.isAwaiting).to.be.a('boolean');
            expect(data.isAwaiting).to.be(false);
            expect(data.lyrics).to.be.a('string');
            expect(data.lyrics).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.TagDTO);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.trivia).to.be.a('string');
            expect(data.trivia).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByLyricsFragmentUsingGET1', function() {
        it('should call getByLyricsFragmentUsingGET1 successfully', function(done) {
          // TODO: uncomment, update parameter values for getByLyricsFragmentUsingGET1 call and complete the assertions
          /*
          var value = "value_example";
          var opts = {};
          opts.limit = 56;

          instance.getByLyricsFragmentUsingGET1(value, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.SongDTO);
              expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                    expect(data.addedBy.addedBy).to.be.a('number');
                expect(data.addedBy.addedBy).to.be("0");
                expect(data.addedBy.addedSong).to.be.a('number');
                expect(data.addedBy.addedSong).to.be("0");
                expect(data.addedBy.id).to.be.a('number');
                expect(data.addedBy.id).to.be("0");
                expect(data.addedBy.timestamp).to.be.a(Date);
                expect(data.addedBy.timestamp).to.be(new Date());
              expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                    expect(data.author.id).to.be.a('number');
                expect(data.author.id).to.be("0");
                expect(data.author.name).to.be.a('string');
                expect(data.author.name).to.be("");
              expect(data.averageRating).to.be.a('number');
              expect(data.averageRating).to.be();
              expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                    expect(data.category.id).to.be.a('number');
                expect(data.category.id).to.be("0");
                expect(data.category.name).to.be.a('string');
                expect(data.category.name).to.be("");
              {
                let dataCtr = data.coauthors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                  expect(data.authorId).to.be.a('number');
                  expect(data.authorId).to.be("0");
                  expect(data.coauthorFunction).to.be.a('string');
                  expect(data.coauthorFunction).to.be("MUSIC");
                  expect(data.songId).to.be.a('number');
                  expect(data.songId).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.edits;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongEditDTO);
                  expect(data.editedBy).to.be.a('number');
                  expect(data.editedBy).to.be("0");
                  expect(data.editedSong).to.be.a('number');
                  expect(data.editedSong).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.timestamp).to.be.a(Date);
                  expect(data.timestamp).to.be(new Date());
  
                        }
              }
              expect(data.guitarTabs).to.be.a('string');
              expect(data.guitarTabs).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.isAwaiting).to.be.a('boolean');
              expect(data.isAwaiting).to.be(false);
              expect(data.lyrics).to.be.a('string');
              expect(data.lyrics).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.TagDTO);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.trivia).to.be.a('string');
              expect(data.trivia).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByRatingUsingGET', function() {
        it('should call getByRatingUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getByRatingUsingGET call and complete the assertions
          /*
          var opts = {};
          opts.equal = 1.2;
          opts.greaterThanEqual = 1.2;
          opts.lessThanEqual = 1.2;

          instance.getByRatingUsingGET(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.SongDTO);
              expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                    expect(data.addedBy.addedBy).to.be.a('number');
                expect(data.addedBy.addedBy).to.be("0");
                expect(data.addedBy.addedSong).to.be.a('number');
                expect(data.addedBy.addedSong).to.be("0");
                expect(data.addedBy.id).to.be.a('number');
                expect(data.addedBy.id).to.be("0");
                expect(data.addedBy.timestamp).to.be.a(Date);
                expect(data.addedBy.timestamp).to.be(new Date());
              expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                    expect(data.author.id).to.be.a('number');
                expect(data.author.id).to.be("0");
                expect(data.author.name).to.be.a('string');
                expect(data.author.name).to.be("");
              expect(data.averageRating).to.be.a('number');
              expect(data.averageRating).to.be();
              expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                    expect(data.category.id).to.be.a('number');
                expect(data.category.id).to.be("0");
                expect(data.category.name).to.be.a('string');
                expect(data.category.name).to.be("");
              {
                let dataCtr = data.coauthors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                  expect(data.authorId).to.be.a('number');
                  expect(data.authorId).to.be("0");
                  expect(data.coauthorFunction).to.be.a('string');
                  expect(data.coauthorFunction).to.be("MUSIC");
                  expect(data.songId).to.be.a('number');
                  expect(data.songId).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.edits;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongEditDTO);
                  expect(data.editedBy).to.be.a('number');
                  expect(data.editedBy).to.be("0");
                  expect(data.editedSong).to.be.a('number');
                  expect(data.editedSong).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.timestamp).to.be.a(Date);
                  expect(data.timestamp).to.be(new Date());
  
                        }
              }
              expect(data.guitarTabs).to.be.a('string');
              expect(data.guitarTabs).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.isAwaiting).to.be.a('boolean');
              expect(data.isAwaiting).to.be(false);
              expect(data.lyrics).to.be.a('string');
              expect(data.lyrics).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.TagDTO);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.trivia).to.be.a('string');
              expect(data.trivia).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByTagUsingGET1', function() {
        it('should call getByTagUsingGET1 successfully', function(done) {
          // TODO: uncomment, update parameter values for getByTagUsingGET1 call and complete the assertions
          /*
          var tagId = 789;
          var opts = {};
          opts.limit = 56;

          instance.getByTagUsingGET1(tagId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.SongDTO);
              expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                    expect(data.addedBy.addedBy).to.be.a('number');
                expect(data.addedBy.addedBy).to.be("0");
                expect(data.addedBy.addedSong).to.be.a('number');
                expect(data.addedBy.addedSong).to.be("0");
                expect(data.addedBy.id).to.be.a('number');
                expect(data.addedBy.id).to.be("0");
                expect(data.addedBy.timestamp).to.be.a(Date);
                expect(data.addedBy.timestamp).to.be(new Date());
              expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                    expect(data.author.id).to.be.a('number');
                expect(data.author.id).to.be("0");
                expect(data.author.name).to.be.a('string');
                expect(data.author.name).to.be("");
              expect(data.averageRating).to.be.a('number');
              expect(data.averageRating).to.be();
              expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                    expect(data.category.id).to.be.a('number');
                expect(data.category.id).to.be("0");
                expect(data.category.name).to.be.a('string');
                expect(data.category.name).to.be("");
              {
                let dataCtr = data.coauthors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                  expect(data.authorId).to.be.a('number');
                  expect(data.authorId).to.be("0");
                  expect(data.coauthorFunction).to.be.a('string');
                  expect(data.coauthorFunction).to.be("MUSIC");
                  expect(data.songId).to.be.a('number');
                  expect(data.songId).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.edits;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongEditDTO);
                  expect(data.editedBy).to.be.a('number');
                  expect(data.editedBy).to.be("0");
                  expect(data.editedSong).to.be.a('number');
                  expect(data.editedSong).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.timestamp).to.be.a(Date);
                  expect(data.timestamp).to.be(new Date());
  
                        }
              }
              expect(data.guitarTabs).to.be.a('string');
              expect(data.guitarTabs).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.isAwaiting).to.be.a('boolean');
              expect(data.isAwaiting).to.be(false);
              expect(data.lyrics).to.be.a('string');
              expect(data.lyrics).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.TagDTO);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.trivia).to.be.a('string');
              expect(data.trivia).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getByTitleFragmentUsingGET1', function() {
        it('should call getByTitleFragmentUsingGET1 successfully', function(done) {
          // TODO: uncomment, update parameter values for getByTitleFragmentUsingGET1 call and complete the assertions
          /*
          var title = "title_example";
          var opts = {};
          opts.limit = 56;

          instance.getByTitleFragmentUsingGET1(title, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.SongDTO);
              expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                    expect(data.addedBy.addedBy).to.be.a('number');
                expect(data.addedBy.addedBy).to.be("0");
                expect(data.addedBy.addedSong).to.be.a('number');
                expect(data.addedBy.addedSong).to.be("0");
                expect(data.addedBy.id).to.be.a('number');
                expect(data.addedBy.id).to.be("0");
                expect(data.addedBy.timestamp).to.be.a(Date);
                expect(data.addedBy.timestamp).to.be(new Date());
              expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                    expect(data.author.id).to.be.a('number');
                expect(data.author.id).to.be("0");
                expect(data.author.name).to.be.a('string');
                expect(data.author.name).to.be("");
              expect(data.averageRating).to.be.a('number');
              expect(data.averageRating).to.be();
              expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                    expect(data.category.id).to.be.a('number');
                expect(data.category.id).to.be("0");
                expect(data.category.name).to.be.a('string');
                expect(data.category.name).to.be("");
              {
                let dataCtr = data.coauthors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                  expect(data.authorId).to.be.a('number');
                  expect(data.authorId).to.be("0");
                  expect(data.coauthorFunction).to.be.a('string');
                  expect(data.coauthorFunction).to.be("MUSIC");
                  expect(data.songId).to.be.a('number');
                  expect(data.songId).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.edits;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongEditDTO);
                  expect(data.editedBy).to.be.a('number');
                  expect(data.editedBy).to.be("0");
                  expect(data.editedSong).to.be.a('number');
                  expect(data.editedSong).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.timestamp).to.be.a(Date);
                  expect(data.timestamp).to.be(new Date());
  
                        }
              }
              expect(data.guitarTabs).to.be.a('string');
              expect(data.guitarTabs).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.isAwaiting).to.be.a('boolean');
              expect(data.isAwaiting).to.be(false);
              expect(data.lyrics).to.be.a('string');
              expect(data.lyrics).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.TagDTO);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.trivia).to.be.a('string');
              expect(data.trivia).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLatestUsingGET1', function() {
        it('should call getLatestUsingGET1 successfully', function(done) {
          // TODO: uncomment, update parameter values for getLatestUsingGET1 call and complete the assertions
          /*
          var limit = 56;

          instance.getLatestUsingGET1(limit, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.SongDTO);
              expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                    expect(data.addedBy.addedBy).to.be.a('number');
                expect(data.addedBy.addedBy).to.be("0");
                expect(data.addedBy.addedSong).to.be.a('number');
                expect(data.addedBy.addedSong).to.be("0");
                expect(data.addedBy.id).to.be.a('number');
                expect(data.addedBy.id).to.be("0");
                expect(data.addedBy.timestamp).to.be.a(Date);
                expect(data.addedBy.timestamp).to.be(new Date());
              expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                    expect(data.author.id).to.be.a('number');
                expect(data.author.id).to.be("0");
                expect(data.author.name).to.be.a('string');
                expect(data.author.name).to.be("");
              expect(data.averageRating).to.be.a('number');
              expect(data.averageRating).to.be();
              expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                    expect(data.category.id).to.be.a('number');
                expect(data.category.id).to.be("0");
                expect(data.category.name).to.be.a('string');
                expect(data.category.name).to.be("");
              {
                let dataCtr = data.coauthors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                  expect(data.authorId).to.be.a('number');
                  expect(data.authorId).to.be("0");
                  expect(data.coauthorFunction).to.be.a('string');
                  expect(data.coauthorFunction).to.be("MUSIC");
                  expect(data.songId).to.be.a('number');
                  expect(data.songId).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.edits;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongEditDTO);
                  expect(data.editedBy).to.be.a('number');
                  expect(data.editedBy).to.be("0");
                  expect(data.editedSong).to.be.a('number');
                  expect(data.editedSong).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.timestamp).to.be.a(Date);
                  expect(data.timestamp).to.be(new Date());
  
                        }
              }
              expect(data.guitarTabs).to.be.a('string');
              expect(data.guitarTabs).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.isAwaiting).to.be.a('boolean');
              expect(data.isAwaiting).to.be(false);
              expect(data.lyrics).to.be.a('string');
              expect(data.lyrics).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.TagDTO);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.trivia).to.be.a('string');
              expect(data.trivia).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSongPlaylistsUsingGET', function() {
        it('should call getSongPlaylistsUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getSongPlaylistsUsingGET call and complete the assertions
          /*
          var id = 789;

          instance.getSongPlaylistsUsingGET(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.PlaylistDTO);
              expect(data.creationTime).to.be.a(Date);
              expect(data.creationTime).to.be(new Date());
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.isPrivate).to.be.a('boolean');
              expect(data.isPrivate).to.be(false);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.ownerId).to.be.a('number');
              expect(data.ownerId).to.be("0");
              {
                let dataCtr = data.songs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be("0");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSongRatingsUsingGET', function() {
        it('should call getSongRatingsUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getSongRatingsUsingGET call and complete the assertions
          /*
          var id = 789;

          instance.getSongRatingsUsingGET(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.UserSongRatingDTO);
              expect(data.rating).to.be.a('number');
              expect(data.rating).to.be();
              expect(data.songId).to.be.a('number');
              expect(data.songId).to.be("0");
              expect(data.userId).to.be.a('number');
              expect(data.userId).to.be("0");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSongUserLibrariesUsingGET', function() {
        it('should call getSongUserLibrariesUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getSongUserLibrariesUsingGET call and complete the assertions
          /*
          var id = 789;

          instance.getSongUserLibrariesUsingGET(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.UserDTO);
              expect(data.activated).to.be.a('boolean');
              expect(data.activated).to.be(false);
              expect(data.email).to.be.a('string');
              expect(data.email).to.be("");
              expect(data.firstName).to.be.a('string');
              expect(data.firstName).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.imageUrl).to.be.a('string');
              expect(data.imageUrl).to.be("");
              expect(data.lastName).to.be.a('string');
              expect(data.lastName).to.be("");
              expect(data.registrationDate).to.be.a(Date);
              expect(data.registrationDate).to.be(new Date());
              {
                let dataCtr = data.songs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be("0");
                }
              }
              expect(data.userRoleId).to.be.a('number');
              expect(data.userRoleId).to.be("0");
              expect(data.username).to.be.a('string');
              expect(data.username).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSongsAddedByUserUsingGET', function() {
        it('should call getSongsAddedByUserUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getSongsAddedByUserUsingGET call and complete the assertions
          /*
          var id = 789;

          instance.getSongsAddedByUserUsingGET(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.SongDTO);
              expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                    expect(data.addedBy.addedBy).to.be.a('number');
                expect(data.addedBy.addedBy).to.be("0");
                expect(data.addedBy.addedSong).to.be.a('number');
                expect(data.addedBy.addedSong).to.be("0");
                expect(data.addedBy.id).to.be.a('number');
                expect(data.addedBy.id).to.be("0");
                expect(data.addedBy.timestamp).to.be.a(Date);
                expect(data.addedBy.timestamp).to.be(new Date());
              expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                    expect(data.author.id).to.be.a('number');
                expect(data.author.id).to.be("0");
                expect(data.author.name).to.be.a('string');
                expect(data.author.name).to.be("");
              expect(data.averageRating).to.be.a('number');
              expect(data.averageRating).to.be();
              expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                    expect(data.category.id).to.be.a('number');
                expect(data.category.id).to.be("0");
                expect(data.category.name).to.be.a('string');
                expect(data.category.name).to.be("");
              {
                let dataCtr = data.coauthors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                  expect(data.authorId).to.be.a('number');
                  expect(data.authorId).to.be("0");
                  expect(data.coauthorFunction).to.be.a('string');
                  expect(data.coauthorFunction).to.be("MUSIC");
                  expect(data.songId).to.be.a('number');
                  expect(data.songId).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.edits;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongEditDTO);
                  expect(data.editedBy).to.be.a('number');
                  expect(data.editedBy).to.be("0");
                  expect(data.editedSong).to.be.a('number');
                  expect(data.editedSong).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.timestamp).to.be.a(Date);
                  expect(data.timestamp).to.be(new Date());
  
                        }
              }
              expect(data.guitarTabs).to.be.a('string');
              expect(data.guitarTabs).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.isAwaiting).to.be.a('boolean');
              expect(data.isAwaiting).to.be(false);
              expect(data.lyrics).to.be.a('string');
              expect(data.lyrics).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.TagDTO);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.trivia).to.be.a('string');
              expect(data.trivia).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSongsEditedByUserUsingGET', function() {
        it('should call getSongsEditedByUserUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getSongsEditedByUserUsingGET call and complete the assertions
          /*
          var id = 789;

          instance.getSongsEditedByUserUsingGET(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.SongDTO);
              expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                    expect(data.addedBy.addedBy).to.be.a('number');
                expect(data.addedBy.addedBy).to.be("0");
                expect(data.addedBy.addedSong).to.be.a('number');
                expect(data.addedBy.addedSong).to.be("0");
                expect(data.addedBy.id).to.be.a('number');
                expect(data.addedBy.id).to.be("0");
                expect(data.addedBy.timestamp).to.be.a(Date);
                expect(data.addedBy.timestamp).to.be(new Date());
              expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                    expect(data.author.id).to.be.a('number');
                expect(data.author.id).to.be("0");
                expect(data.author.name).to.be.a('string');
                expect(data.author.name).to.be("");
              expect(data.averageRating).to.be.a('number');
              expect(data.averageRating).to.be();
              expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                    expect(data.category.id).to.be.a('number');
                expect(data.category.id).to.be("0");
                expect(data.category.name).to.be.a('string');
                expect(data.category.name).to.be("");
              {
                let dataCtr = data.coauthors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                  expect(data.authorId).to.be.a('number');
                  expect(data.authorId).to.be("0");
                  expect(data.coauthorFunction).to.be.a('string');
                  expect(data.coauthorFunction).to.be("MUSIC");
                  expect(data.songId).to.be.a('number');
                  expect(data.songId).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.edits;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongEditDTO);
                  expect(data.editedBy).to.be.a('number');
                  expect(data.editedBy).to.be("0");
                  expect(data.editedSong).to.be.a('number');
                  expect(data.editedSong).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.timestamp).to.be.a(Date);
                  expect(data.timestamp).to.be(new Date());
  
                        }
              }
              expect(data.guitarTabs).to.be.a('string');
              expect(data.guitarTabs).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.isAwaiting).to.be.a('boolean');
              expect(data.isAwaiting).to.be(false);
              expect(data.lyrics).to.be.a('string');
              expect(data.lyrics).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.TagDTO);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.trivia).to.be.a('string');
              expect(data.trivia).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserSongsUsingGET', function() {
        it('should call getUserSongsUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserSongsUsingGET call and complete the assertions
          /*
          var id = 789;

          instance.getUserSongsUsingGET(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SongbookApi.SongDTO);
              expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                    expect(data.addedBy.addedBy).to.be.a('number');
                expect(data.addedBy.addedBy).to.be("0");
                expect(data.addedBy.addedSong).to.be.a('number');
                expect(data.addedBy.addedSong).to.be("0");
                expect(data.addedBy.id).to.be.a('number');
                expect(data.addedBy.id).to.be("0");
                expect(data.addedBy.timestamp).to.be.a(Date);
                expect(data.addedBy.timestamp).to.be(new Date());
              expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                    expect(data.author.id).to.be.a('number');
                expect(data.author.id).to.be("0");
                expect(data.author.name).to.be.a('string');
                expect(data.author.name).to.be("");
              expect(data.averageRating).to.be.a('number');
              expect(data.averageRating).to.be();
              expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                    expect(data.category.id).to.be.a('number');
                expect(data.category.id).to.be("0");
                expect(data.category.name).to.be.a('string');
                expect(data.category.name).to.be("");
              {
                let dataCtr = data.coauthors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                  expect(data.authorId).to.be.a('number');
                  expect(data.authorId).to.be("0");
                  expect(data.coauthorFunction).to.be.a('string');
                  expect(data.coauthorFunction).to.be("MUSIC");
                  expect(data.songId).to.be.a('number');
                  expect(data.songId).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.edits;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.SongEditDTO);
                  expect(data.editedBy).to.be.a('number');
                  expect(data.editedBy).to.be("0");
                  expect(data.editedSong).to.be.a('number');
                  expect(data.editedSong).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.timestamp).to.be.a(Date);
                  expect(data.timestamp).to.be(new Date());
  
                        }
              }
              expect(data.guitarTabs).to.be.a('string');
              expect(data.guitarTabs).to.be("");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.isAwaiting).to.be.a('boolean');
              expect(data.isAwaiting).to.be(false);
              expect(data.lyrics).to.be.a('string');
              expect(data.lyrics).to.be("");
              {
                let dataCtr = data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SongbookApi.TagDTO);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.trivia).to.be.a('string');
              expect(data.trivia).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('loadFromFileUsingPOST', function() {
        it('should call loadFromFileUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for loadFromFileUsingPOST call and complete the assertions
          /*
          var file = "/path/to/file.txt";

          instance.loadFromFileUsingPOST(file, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.SongDTO);
            expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                  expect(data.addedBy.addedBy).to.be.a('number');
              expect(data.addedBy.addedBy).to.be("0");
              expect(data.addedBy.addedSong).to.be.a('number');
              expect(data.addedBy.addedSong).to.be("0");
              expect(data.addedBy.id).to.be.a('number');
              expect(data.addedBy.id).to.be("0");
              expect(data.addedBy.timestamp).to.be.a(Date);
              expect(data.addedBy.timestamp).to.be(new Date());
            expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                  expect(data.author.id).to.be.a('number');
              expect(data.author.id).to.be("0");
              expect(data.author.name).to.be.a('string');
              expect(data.author.name).to.be("");
            expect(data.averageRating).to.be.a('number');
            expect(data.averageRating).to.be();
            expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                  expect(data.category.id).to.be.a('number');
              expect(data.category.id).to.be("0");
              expect(data.category.name).to.be.a('string');
              expect(data.category.name).to.be("");
            {
              let dataCtr = data.coauthors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                expect(data.authorId).to.be.a('number');
                expect(data.authorId).to.be("0");
                expect(data.coauthorFunction).to.be.a('string');
                expect(data.coauthorFunction).to.be("MUSIC");
                expect(data.songId).to.be.a('number');
                expect(data.songId).to.be("0");

                      }
            }
            {
              let dataCtr = data.edits;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongEditDTO);
                expect(data.editedBy).to.be.a('number');
                expect(data.editedBy).to.be("0");
                expect(data.editedSong).to.be.a('number');
                expect(data.editedSong).to.be("0");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.timestamp).to.be.a(Date);
                expect(data.timestamp).to.be(new Date());

                      }
            }
            expect(data.guitarTabs).to.be.a('string');
            expect(data.guitarTabs).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.isAwaiting).to.be.a('boolean');
            expect(data.isAwaiting).to.be(false);
            expect(data.lyrics).to.be.a('string');
            expect(data.lyrics).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.TagDTO);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.trivia).to.be.a('string');
            expect(data.trivia).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeTagFromSongUsingPATCH', function() {
        it('should call removeTagFromSongUsingPATCH successfully', function(done) {
          // TODO: uncomment, update parameter values for removeTagFromSongUsingPATCH call and complete the assertions
          /*
          var id = 789;
          var tagId = 789;

          instance.removeTagFromSongUsingPATCH(id, tagId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.SongDTO);
            expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                  expect(data.addedBy.addedBy).to.be.a('number');
              expect(data.addedBy.addedBy).to.be("0");
              expect(data.addedBy.addedSong).to.be.a('number');
              expect(data.addedBy.addedSong).to.be("0");
              expect(data.addedBy.id).to.be.a('number');
              expect(data.addedBy.id).to.be("0");
              expect(data.addedBy.timestamp).to.be.a(Date);
              expect(data.addedBy.timestamp).to.be(new Date());
            expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                  expect(data.author.id).to.be.a('number');
              expect(data.author.id).to.be("0");
              expect(data.author.name).to.be.a('string');
              expect(data.author.name).to.be("");
            expect(data.averageRating).to.be.a('number');
            expect(data.averageRating).to.be();
            expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                  expect(data.category.id).to.be.a('number');
              expect(data.category.id).to.be("0");
              expect(data.category.name).to.be.a('string');
              expect(data.category.name).to.be("");
            {
              let dataCtr = data.coauthors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                expect(data.authorId).to.be.a('number');
                expect(data.authorId).to.be("0");
                expect(data.coauthorFunction).to.be.a('string');
                expect(data.coauthorFunction).to.be("MUSIC");
                expect(data.songId).to.be.a('number');
                expect(data.songId).to.be("0");

                      }
            }
            {
              let dataCtr = data.edits;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongEditDTO);
                expect(data.editedBy).to.be.a('number');
                expect(data.editedBy).to.be("0");
                expect(data.editedSong).to.be.a('number');
                expect(data.editedSong).to.be("0");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.timestamp).to.be.a(Date);
                expect(data.timestamp).to.be(new Date());

                      }
            }
            expect(data.guitarTabs).to.be.a('string');
            expect(data.guitarTabs).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.isAwaiting).to.be.a('boolean');
            expect(data.isAwaiting).to.be(false);
            expect(data.lyrics).to.be.a('string');
            expect(data.lyrics).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.TagDTO);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.trivia).to.be.a('string');
            expect(data.trivia).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeTagsFromSongBulkUsingPATCH', function() {
        it('should call removeTagsFromSongBulkUsingPATCH successfully', function(done) {
          // TODO: uncomment, update parameter values for removeTagsFromSongBulkUsingPATCH call and complete the assertions
          /*
          var id = 789;
          var tagIds = "tagIds_example";

          instance.removeTagsFromSongBulkUsingPATCH(id, tagIds, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.SongDTO);
            expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                  expect(data.addedBy.addedBy).to.be.a('number');
              expect(data.addedBy.addedBy).to.be("0");
              expect(data.addedBy.addedSong).to.be.a('number');
              expect(data.addedBy.addedSong).to.be("0");
              expect(data.addedBy.id).to.be.a('number');
              expect(data.addedBy.id).to.be("0");
              expect(data.addedBy.timestamp).to.be.a(Date);
              expect(data.addedBy.timestamp).to.be(new Date());
            expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                  expect(data.author.id).to.be.a('number');
              expect(data.author.id).to.be("0");
              expect(data.author.name).to.be.a('string');
              expect(data.author.name).to.be("");
            expect(data.averageRating).to.be.a('number');
            expect(data.averageRating).to.be();
            expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                  expect(data.category.id).to.be.a('number');
              expect(data.category.id).to.be("0");
              expect(data.category.name).to.be.a('string');
              expect(data.category.name).to.be("");
            {
              let dataCtr = data.coauthors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                expect(data.authorId).to.be.a('number');
                expect(data.authorId).to.be("0");
                expect(data.coauthorFunction).to.be.a('string');
                expect(data.coauthorFunction).to.be("MUSIC");
                expect(data.songId).to.be.a('number');
                expect(data.songId).to.be("0");

                      }
            }
            {
              let dataCtr = data.edits;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongEditDTO);
                expect(data.editedBy).to.be.a('number');
                expect(data.editedBy).to.be("0");
                expect(data.editedSong).to.be.a('number');
                expect(data.editedSong).to.be("0");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.timestamp).to.be.a(Date);
                expect(data.timestamp).to.be(new Date());

                      }
            }
            expect(data.guitarTabs).to.be.a('string');
            expect(data.guitarTabs).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.isAwaiting).to.be.a('boolean');
            expect(data.isAwaiting).to.be(false);
            expect(data.lyrics).to.be.a('string');
            expect(data.lyrics).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.TagDTO);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.trivia).to.be.a('string');
            expect(data.trivia).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateUsingPUT4', function() {
        it('should call updateUsingPUT4 successfully', function(done) {
          // TODO: uncomment, update parameter values for updateUsingPUT4 call and complete the assertions
          /*
          var obj = new SongbookApi.SongDTO();
          obj.addedBy = new SongbookApi.SongAddDTO();
          obj.addedBy.addedBy = "0";
          obj.addedBy.addedSong = "0";
          obj.addedBy.id = "0";
          obj.addedBy.timestamp = new Date();
          obj.author = new SongbookApi.AuthorDTO();
          obj.author.id = "0";
          obj.author.name = "";
          obj.averageRating = ;
          obj.category = new SongbookApi.CategoryDTO();
          obj.category.id = "0";
          obj.category.name = "";
          obj.coauthors = [new SongbookApi.SongCoauthorDTO()];
          obj.coauthors[0].authorId = "0";
          obj.coauthors[0].coauthorFunction = "MUSIC";
          obj.coauthors[0].songId = "0";
          obj.edits = [new SongbookApi.SongEditDTO()];
          obj.edits[0].editedBy = "0";
          obj.edits[0].editedSong = "0";
          obj.edits[0].id = "0";
          obj.edits[0].timestamp = new Date();
          obj.guitarTabs = "";
          obj.id = "0";
          obj.isAwaiting = false;
          obj.lyrics = "";
          obj.tags = [new SongbookApi.TagDTO()];
          obj.tags[0].id = "0";
          obj.tags[0].name = "";
          obj.title = "";
          obj.trivia = "";

          instance.updateUsingPUT4(obj, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SongbookApi.SongDTO);
            expect(data.addedBy).to.be.a(SongbookApi.SongAddDTO);
                  expect(data.addedBy.addedBy).to.be.a('number');
              expect(data.addedBy.addedBy).to.be("0");
              expect(data.addedBy.addedSong).to.be.a('number');
              expect(data.addedBy.addedSong).to.be("0");
              expect(data.addedBy.id).to.be.a('number');
              expect(data.addedBy.id).to.be("0");
              expect(data.addedBy.timestamp).to.be.a(Date);
              expect(data.addedBy.timestamp).to.be(new Date());
            expect(data.author).to.be.a(SongbookApi.AuthorDTO);
                  expect(data.author.id).to.be.a('number');
              expect(data.author.id).to.be("0");
              expect(data.author.name).to.be.a('string');
              expect(data.author.name).to.be("");
            expect(data.averageRating).to.be.a('number');
            expect(data.averageRating).to.be();
            expect(data.category).to.be.a(SongbookApi.CategoryDTO);
                  expect(data.category.id).to.be.a('number');
              expect(data.category.id).to.be("0");
              expect(data.category.name).to.be.a('string');
              expect(data.category.name).to.be("");
            {
              let dataCtr = data.coauthors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongCoauthorDTO);
                expect(data.authorId).to.be.a('number');
                expect(data.authorId).to.be("0");
                expect(data.coauthorFunction).to.be.a('string');
                expect(data.coauthorFunction).to.be("MUSIC");
                expect(data.songId).to.be.a('number');
                expect(data.songId).to.be("0");

                      }
            }
            {
              let dataCtr = data.edits;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.SongEditDTO);
                expect(data.editedBy).to.be.a('number');
                expect(data.editedBy).to.be("0");
                expect(data.editedSong).to.be.a('number');
                expect(data.editedSong).to.be("0");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.timestamp).to.be.a(Date);
                expect(data.timestamp).to.be(new Date());

                      }
            }
            expect(data.guitarTabs).to.be.a('string');
            expect(data.guitarTabs).to.be("");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.isAwaiting).to.be.a('boolean');
            expect(data.isAwaiting).to.be(false);
            expect(data.lyrics).to.be.a('string');
            expect(data.lyrics).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SongbookApi.TagDTO);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.trivia).to.be.a('string');
            expect(data.trivia).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
