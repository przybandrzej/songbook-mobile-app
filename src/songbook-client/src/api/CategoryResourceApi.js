/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {CategoryDTO} from '../model/CategoryDTO';
import {SongDTO} from '../model/SongDTO';
import {UniversalCreateDTO} from '../model/UniversalCreateDTO';

/**
* CategoryResource service.
* @module api/CategoryResourceApi
* @version 1.5.5
*/
export class CategoryResourceApi {

    /**
    * Constructs a new CategoryResourceApi. 
    * @alias module:api/CategoryResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createUsingPOST1 operation.
     * @callback module:api/CategoryResourceApi~createUsingPOST1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create
     * @param {module:model/UniversalCreateDTO} categoryDto categoryDto
     * @param {module:api/CategoryResourceApi~createUsingPOST1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryDTO}
     */
    createUsingPOST1(categoryDto, callback) {
      let postBody = categoryDto;

      // verify the required parameter 'categoryDto' is set
      if (categoryDto === undefined || categoryDto === null) {
        throw new Error("Missing the required parameter 'categoryDto' when calling createUsingPOST1");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = CategoryDTO;

      return this.apiClient.callApi(
        '/api/categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUsingDELETE1 operation.
     * @callback module:api/CategoryResourceApi~deleteUsingDELETE1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete
     * @param {Number} id id
     * @param {module:api/CategoryResourceApi~deleteUsingDELETE1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUsingDELETE1(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUsingDELETE1");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/categories/id/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllUsingGET2 operation.
     * @callback module:api/CategoryResourceApi~getAllUsingGET2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CategoryDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAll
     * @param {module:api/CategoryResourceApi~getAllUsingGET2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CategoryDTO>}
     */
    getAllUsingGET2(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CategoryDTO];

      return this.apiClient.callApi(
        '/api/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByIdUsingGET2 operation.
     * @callback module:api/CategoryResourceApi~getByIdUsingGET2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getById
     * @param {Number} id id
     * @param {module:api/CategoryResourceApi~getByIdUsingGET2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryDTO}
     */
    getByIdUsingGET2(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdUsingGET2");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CategoryDTO;

      return this.apiClient.callApi(
        '/api/categories/id/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByNameUsingGET operation.
     * @callback module:api/CategoryResourceApi~getByNameUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CategoryDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getByName
     * @param {String} name name
     * @param {module:api/CategoryResourceApi~getByNameUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CategoryDTO>}
     */
    getByNameUsingGET(name, callback) {
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getByNameUsingGET");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CategoryDTO];

      return this.apiClient.callApi(
        '/api/categories/name/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongsByCategoryIdUsingGET operation.
     * @callback module:api/CategoryResourceApi~getSongsByCategoryIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongsByCategoryId
     * @param {Number} id id
     * @param {module:api/CategoryResourceApi~getSongsByCategoryIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    getSongsByCategoryIdUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongsByCategoryIdUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/categories/id/{id}/songs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUsingPUT1 operation.
     * @callback module:api/CategoryResourceApi~updateUsingPUT1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update
     * @param {module:model/CategoryDTO} categoryDto categoryDto
     * @param {module:api/CategoryResourceApi~updateUsingPUT1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryDTO}
     */
    updateUsingPUT1(categoryDto, callback) {
      let postBody = categoryDto;

      // verify the required parameter 'categoryDto' is set
      if (categoryDto === undefined || categoryDto === null) {
        throw new Error("Missing the required parameter 'categoryDto' when calling updateUsingPUT1");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = CategoryDTO;

      return this.apiClient.callApi(
        '/api/categories', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
