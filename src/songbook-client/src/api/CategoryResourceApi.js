/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CategoryDTO', 'model/SongDTO', 'model/UniversalCreateDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CategoryDTO'), require('../model/SongDTO'), require('../model/UniversalCreateDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.SongbookApi) {
      root.SongbookApi = {};
    }
    root.SongbookApi.CategoryResourceApi = factory(root.SongbookApi.ApiClient, root.SongbookApi.CategoryDTO, root.SongbookApi.SongDTO, root.SongbookApi.UniversalCreateDTO);
  }
}(this, function(ApiClient, CategoryDTO, SongDTO, UniversalCreateDTO) {
  'use strict';

  /**
   * CategoryResource service.
   * @module api/CategoryResourceApi
   * @version 1.5.5
   */

  /**
   * Constructs a new CategoryResourceApi. 
   * @alias module:api/CategoryResourceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createUsingPOST1 operation.
     * @callback module:api/CategoryResourceApi~createUsingPOST1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create
     * @param {module:model/UniversalCreateDTO} categoryDto categoryDto
     * @param {module:api/CategoryResourceApi~createUsingPOST1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryDTO}
     */
    this.createUsingPOST1 = function(categoryDto, callback) {
      var postBody = categoryDto;

      // verify the required parameter 'categoryDto' is set
      if (categoryDto === undefined || categoryDto === null) {
        throw new Error("Missing the required parameter 'categoryDto' when calling createUsingPOST1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = CategoryDTO;

      return this.apiClient.callApi(
        '/api/categories', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUsingDELETE1 operation.
     * @callback module:api/CategoryResourceApi~deleteUsingDELETE1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete
     * @param {Number} id id
     * @param {module:api/CategoryResourceApi~deleteUsingDELETE1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteUsingDELETE1 = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUsingDELETE1");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/categories/id/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllUsingGET2 operation.
     * @callback module:api/CategoryResourceApi~getAllUsingGET2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CategoryDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAll
     * @param {module:api/CategoryResourceApi~getAllUsingGET2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CategoryDTO>}
     */
    this.getAllUsingGET2 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [CategoryDTO];

      return this.apiClient.callApi(
        '/api/categories', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByIdUsingGET2 operation.
     * @callback module:api/CategoryResourceApi~getByIdUsingGET2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getById
     * @param {Number} id id
     * @param {module:api/CategoryResourceApi~getByIdUsingGET2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryDTO}
     */
    this.getByIdUsingGET2 = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdUsingGET2");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = CategoryDTO;

      return this.apiClient.callApi(
        '/api/categories/id/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByNameUsingGET operation.
     * @callback module:api/CategoryResourceApi~getByNameUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CategoryDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getByName
     * @param {String} name name
     * @param {module:api/CategoryResourceApi~getByNameUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CategoryDTO>}
     */
    this.getByNameUsingGET = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getByNameUsingGET");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [CategoryDTO];

      return this.apiClient.callApi(
        '/api/categories/name/{name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongsByCategoryIdUsingGET operation.
     * @callback module:api/CategoryResourceApi~getSongsByCategoryIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongsByCategoryId
     * @param {Number} id id
     * @param {module:api/CategoryResourceApi~getSongsByCategoryIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    this.getSongsByCategoryIdUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongsByCategoryIdUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/categories/id/{id}/songs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUsingPUT1 operation.
     * @callback module:api/CategoryResourceApi~updateUsingPUT1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update
     * @param {module:model/CategoryDTO} categoryDto categoryDto
     * @param {module:api/CategoryResourceApi~updateUsingPUT1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryDTO}
     */
    this.updateUsingPUT1 = function(categoryDto, callback) {
      var postBody = categoryDto;

      // verify the required parameter 'categoryDto' is set
      if (categoryDto === undefined || categoryDto === null) {
        throw new Error("Missing the required parameter 'categoryDto' when calling updateUsingPUT1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = CategoryDTO;

      return this.apiClient.callApi(
        '/api/categories', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
