/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {UserSongRatingDTO} from '../model/UserSongRatingDTO';

/**
* UserSongRatingResource service.
* @module api/UserSongRatingResourceApi
* @version 1.5.5
*/
export class UserSongRatingResourceApi {

    /**
    * Constructs a new UserSongRatingResourceApi. 
    * @alias module:api/UserSongRatingResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createRatingUsingPOST operation.
     * @callback module:api/UserSongRatingResourceApi~createRatingUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserSongRatingDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createRating
     * @param {module:model/UserSongRatingDTO} dto dto
     * @param {module:api/UserSongRatingResourceApi~createRatingUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserSongRatingDTO}
     */
    createRatingUsingPOST(dto, callback) {
      let postBody = dto;

      // verify the required parameter 'dto' is set
      if (dto === undefined || dto === null) {
        throw new Error("Missing the required parameter 'dto' when calling createRatingUsingPOST");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserSongRatingDTO;

      return this.apiClient.callApi(
        '/api/ratings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRatingUsingDELETE operation.
     * @callback module:api/UserSongRatingResourceApi~deleteRatingUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteRating
     * @param {Number} id id
     * @param {module:api/UserSongRatingResourceApi~deleteRatingUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRatingUsingDELETE(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRatingUsingDELETE");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/ratings/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllRatingsUsingGET operation.
     * @callback module:api/UserSongRatingResourceApi~getAllRatingsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserSongRatingDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllRatings
     * @param {Object} opts Optional parameters
     * @param {Number} opts.equal equal
     * @param {Number} opts.greaterThanEqual greaterThanEqual
     * @param {Number} opts.lessThanEqual lessThanEqual
     * @param {module:api/UserSongRatingResourceApi~getAllRatingsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserSongRatingDTO>}
     */
    getAllRatingsUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'equal': opts['equal'],
        'greaterThanEqual': opts['greaterThanEqual'],
        'lessThanEqual': opts['lessThanEqual']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UserSongRatingDTO];

      return this.apiClient.callApi(
        '/api/ratings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRatingByIdUsingGET operation.
     * @callback module:api/UserSongRatingResourceApi~getRatingByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserSongRatingDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getRatingById
     * @param {Number} id id
     * @param {module:api/UserSongRatingResourceApi~getRatingByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserSongRatingDTO}
     */
    getRatingByIdUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRatingByIdUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserSongRatingDTO;

      return this.apiClient.callApi(
        '/api/ratings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRatingByUserIdAndSongIdUsingGET operation.
     * @callback module:api/UserSongRatingResourceApi~getRatingByUserIdAndSongIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserSongRatingDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getRatingByUserIdAndSongId
     * @param {Number} songId songId
     * @param {Number} userId userId
     * @param {module:api/UserSongRatingResourceApi~getRatingByUserIdAndSongIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserSongRatingDTO}
     */
    getRatingByUserIdAndSongIdUsingGET(songId, userId, callback) {
      let postBody = null;

      // verify the required parameter 'songId' is set
      if (songId === undefined || songId === null) {
        throw new Error("Missing the required parameter 'songId' when calling getRatingByUserIdAndSongIdUsingGET");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getRatingByUserIdAndSongIdUsingGET");
      }


      let pathParams = {
        'songId': songId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserSongRatingDTO;

      return this.apiClient.callApi(
        '/api/ratings/{userId}/{songId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRatingUsingPUT operation.
     * @callback module:api/UserSongRatingResourceApi~updateRatingUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserSongRatingDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateRating
     * @param {module:model/UserSongRatingDTO} dto dto
     * @param {module:api/UserSongRatingResourceApi~updateRatingUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserSongRatingDTO}
     */
    updateRatingUsingPUT(dto, callback) {
      let postBody = dto;

      // verify the required parameter 'dto' is set
      if (dto === undefined || dto === null) {
        throw new Error("Missing the required parameter 'dto' when calling updateRatingUsingPUT");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserSongRatingDTO;

      return this.apiClient.callApi(
        '/api/ratings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
