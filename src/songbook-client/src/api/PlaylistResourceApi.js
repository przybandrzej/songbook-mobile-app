/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreatePlaylistDTO', 'model/PlaylistDTO', 'model/Resource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreatePlaylistDTO'), require('../model/PlaylistDTO'), require('../model/Resource'));
  } else {
    // Browser globals (root is window)
    if (!root.SongbookApi) {
      root.SongbookApi = {};
    }
    root.SongbookApi.PlaylistResourceApi = factory(root.SongbookApi.ApiClient, root.SongbookApi.CreatePlaylistDTO, root.SongbookApi.PlaylistDTO, root.SongbookApi.Resource);
  }
}(this, function(ApiClient, CreatePlaylistDTO, PlaylistDTO, Resource) {
  'use strict';

  /**
   * PlaylistResource service.
   * @module api/PlaylistResourceApi
   * @version 1.5.5
   */

  /**
   * Constructs a new PlaylistResourceApi. 
   * @alias module:api/PlaylistResourceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addSongUsingPATCH operation.
     * @callback module:api/PlaylistResourceApi~addSongUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addSong
     * @param {Number} id id
     * @param {Number} songId songId
     * @param {module:api/PlaylistResourceApi~addSongUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addSongUsingPATCH = function(id, songId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addSongUsingPATCH");
      }

      // verify the required parameter 'songId' is set
      if (songId === undefined || songId === null) {
        throw new Error("Missing the required parameter 'songId' when calling addSongUsingPATCH");
      }


      var pathParams = {
        'id': id,
        'songId': songId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/playlists/{id}/add-song/{songId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createUsingPOST2 operation.
     * @callback module:api/PlaylistResourceApi~createUsingPOST2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create
     * @param {module:model/CreatePlaylistDTO} dto dto
     * @param {module:api/PlaylistResourceApi~createUsingPOST2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistDTO}
     */
    this.createUsingPOST2 = function(dto, callback) {
      var postBody = dto;

      // verify the required parameter 'dto' is set
      if (dto === undefined || dto === null) {
        throw new Error("Missing the required parameter 'dto' when calling createUsingPOST2");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PlaylistDTO;

      return this.apiClient.callApi(
        '/api/playlists', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUsingDELETE2 operation.
     * @callback module:api/PlaylistResourceApi~deleteUsingDELETE2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete
     * @param {Number} id id
     * @param {module:api/PlaylistResourceApi~deleteUsingDELETE2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteUsingDELETE2 = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUsingDELETE2");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/playlists/id/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadPlaylistPdfSongbookUsingGET operation.
     * @callback module:api/PlaylistResourceApi~downloadPlaylistPdfSongbookUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Resource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * downloadPlaylistPdfSongbook
     * @param {Number} id id
     * @param {module:api/PlaylistResourceApi~downloadPlaylistPdfSongbookUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Resource}
     */
    this.downloadPlaylistPdfSongbookUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadPlaylistPdfSongbookUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Resource;

      return this.apiClient.callApi(
        '/api/playlists/download/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllUsingGET3 operation.
     * @callback module:api/PlaylistResourceApi~getAllUsingGET3Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlaylistDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAll
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includePrivate include_private (default to false)
     * @param {Number} opts.limit limit
     * @param {module:api/PlaylistResourceApi~getAllUsingGET3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlaylistDTO>}
     */
    this.getAllUsingGET3 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'include_private': opts['includePrivate'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [PlaylistDTO];

      return this.apiClient.callApi(
        '/api/playlists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByIdUsingGET3 operation.
     * @callback module:api/PlaylistResourceApi~getByIdUsingGET3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getById
     * @param {Number} id id
     * @param {module:api/PlaylistResourceApi~getByIdUsingGET3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistDTO}
     */
    this.getByIdUsingGET3 = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdUsingGET3");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PlaylistDTO;

      return this.apiClient.callApi(
        '/api/playlists/id/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByNameUsingGET1 operation.
     * @callback module:api/PlaylistResourceApi~getByNameUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlaylistDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getByName
     * @param {String} name name
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includePrivate include_private (default to false)
     * @param {Number} opts.limit limit
     * @param {module:api/PlaylistResourceApi~getByNameUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlaylistDTO>}
     */
    this.getByNameUsingGET1 = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getByNameUsingGET1");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'include_private': opts['includePrivate'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [PlaylistDTO];

      return this.apiClient.callApi(
        '/api/playlists/name/{name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByOwnerIdUsingGET operation.
     * @callback module:api/PlaylistResourceApi~getByOwnerIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlaylistDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getByOwnerId
     * @param {Number} id id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includePrivate include_private (default to false)
     * @param {module:api/PlaylistResourceApi~getByOwnerIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlaylistDTO>}
     */
    this.getByOwnerIdUsingGET = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByOwnerIdUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'include_private': opts['includePrivate'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [PlaylistDTO];

      return this.apiClient.callApi(
        '/api/playlists/ownerId/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeSongUsingPATCH operation.
     * @callback module:api/PlaylistResourceApi~removeSongUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removeSong
     * @param {Number} id id
     * @param {Number} songId songId
     * @param {module:api/PlaylistResourceApi~removeSongUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeSongUsingPATCH = function(id, songId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeSongUsingPATCH");
      }

      // verify the required parameter 'songId' is set
      if (songId === undefined || songId === null) {
        throw new Error("Missing the required parameter 'songId' when calling removeSongUsingPATCH");
      }


      var pathParams = {
        'id': id,
        'songId': songId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/playlists/{id}/remove-song/{songId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUsingPUT2 operation.
     * @callback module:api/PlaylistResourceApi~updateUsingPUT2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update
     * @param {module:model/PlaylistDTO} dto dto
     * @param {module:api/PlaylistResourceApi~updateUsingPUT2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistDTO}
     */
    this.updateUsingPUT2 = function(dto, callback) {
      var postBody = dto;

      // verify the required parameter 'dto' is set
      if (dto === undefined || dto === null) {
        throw new Error("Missing the required parameter 'dto' when calling updateUsingPUT2");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PlaylistDTO;

      return this.apiClient.callApi(
        '/api/playlists', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
