/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {PlaylistDTO} from '../model/PlaylistDTO';
import {Resource} from '../model/Resource';
import {SongDTO} from '../model/SongDTO';

/**
* PlaylistResource service.
* @module api/PlaylistResourceApi
* @version 1.5.5
*/
export class PlaylistResourceApi {

    /**
    * Constructs a new PlaylistResourceApi. 
    * @alias module:api/PlaylistResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addSongToPlaylistUsingPATCH operation.
     * @callback module:api/PlaylistResourceApi~addSongToPlaylistUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addSongToPlaylist
     * @param {Number} id id
     * @param {Number} songId songId
     * @param {module:api/PlaylistResourceApi~addSongToPlaylistUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addSongToPlaylistUsingPATCH(id, songId, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addSongToPlaylistUsingPATCH");
      }

      // verify the required parameter 'songId' is set
      if (songId === undefined || songId === null) {
        throw new Error("Missing the required parameter 'songId' when calling addSongToPlaylistUsingPATCH");
      }


      let pathParams = {
        'id': id,
        'songId': songId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/playlists/{id}/add-song/{songId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePlaylistUsingDELETE operation.
     * @callback module:api/PlaylistResourceApi~deletePlaylistUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletePlaylist
     * @param {Number} id id
     * @param {module:api/PlaylistResourceApi~deletePlaylistUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePlaylistUsingDELETE(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePlaylistUsingDELETE");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/playlists/id/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadPlaylistPdfSongbookUsingGET operation.
     * @callback module:api/PlaylistResourceApi~downloadPlaylistPdfSongbookUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Resource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * downloadPlaylistPdfSongbook
     * @param {Number} id id
     * @param {module:api/PlaylistResourceApi~downloadPlaylistPdfSongbookUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Resource}
     */
    downloadPlaylistPdfSongbookUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadPlaylistPdfSongbookUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Resource;

      return this.apiClient.callApi(
        '/api/playlists/download/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPlaylistsUsingGET operation.
     * @callback module:api/PlaylistResourceApi~getAllPlaylistsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlaylistDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllPlaylists
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includePrivate include_private (default to false)
     * @param {Number} opts.limit limit
     * @param {module:api/PlaylistResourceApi~getAllPlaylistsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlaylistDTO>}
     */
    getAllPlaylistsUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'include_private': opts['includePrivate'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [PlaylistDTO];

      return this.apiClient.callApi(
        '/api/playlists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlaylistByIdUsingGET operation.
     * @callback module:api/PlaylistResourceApi~getPlaylistByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getPlaylistById
     * @param {Number} id id
     * @param {module:api/PlaylistResourceApi~getPlaylistByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistDTO}
     */
    getPlaylistByIdUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPlaylistByIdUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PlaylistDTO;

      return this.apiClient.callApi(
        '/api/playlists/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlaylistByNameUsingGET operation.
     * @callback module:api/PlaylistResourceApi~getPlaylistByNameUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlaylistDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getPlaylistByName
     * @param {String} name name
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includePrivate include_private (default to false)
     * @param {Number} opts.limit limit
     * @param {module:api/PlaylistResourceApi~getPlaylistByNameUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlaylistDTO>}
     */
    getPlaylistByNameUsingGET(name, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getPlaylistByNameUsingGET");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'include_private': opts['includePrivate'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [PlaylistDTO];

      return this.apiClient.callApi(
        '/api/playlists/name/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlaylistSongsUsingGET operation.
     * @callback module:api/PlaylistResourceApi~getPlaylistSongsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getPlaylistSongs
     * @param {Number} id id
     * @param {module:api/PlaylistResourceApi~getPlaylistSongsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    getPlaylistSongsUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPlaylistSongsUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/playlists/{id}/songs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeSongFromPlaylistUsingPATCH operation.
     * @callback module:api/PlaylistResourceApi~removeSongFromPlaylistUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removeSongFromPlaylist
     * @param {Number} id id
     * @param {Number} songId songId
     * @param {module:api/PlaylistResourceApi~removeSongFromPlaylistUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeSongFromPlaylistUsingPATCH(id, songId, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeSongFromPlaylistUsingPATCH");
      }

      // verify the required parameter 'songId' is set
      if (songId === undefined || songId === null) {
        throw new Error("Missing the required parameter 'songId' when calling removeSongFromPlaylistUsingPATCH");
      }


      let pathParams = {
        'id': id,
        'songId': songId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/playlists/{id}/remove-song/{songId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePlaylistUsingPUT operation.
     * @callback module:api/PlaylistResourceApi~updatePlaylistUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updatePlaylist
     * @param {module:model/PlaylistDTO} dto dto
     * @param {module:api/PlaylistResourceApi~updatePlaylistUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistDTO}
     */
    updatePlaylistUsingPUT(dto, callback) {
      let postBody = dto;

      // verify the required parameter 'dto' is set
      if (dto === undefined || dto === null) {
        throw new Error("Missing the required parameter 'dto' when calling updatePlaylistUsingPUT");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PlaylistDTO;

      return this.apiClient.callApi(
        '/api/playlists', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
