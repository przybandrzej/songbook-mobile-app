/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {SongCoauthorDTO} from '../model/SongCoauthorDTO';

/**
* SongCoauthorResource service.
* @module api/SongCoauthorResourceApi
* @version 1.5.5
*/
export class SongCoauthorResourceApi {

    /**
    * Constructs a new SongCoauthorResourceApi. 
    * @alias module:api/SongCoauthorResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCoauthorUsingPOST operation.
     * @callback module:api/SongCoauthorResourceApi~createCoauthorUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongCoauthorDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createCoauthor
     * @param {module:model/SongCoauthorDTO} songCoauthorDTO songCoauthorDTO
     * @param {module:api/SongCoauthorResourceApi~createCoauthorUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongCoauthorDTO}
     */
    createCoauthorUsingPOST(songCoauthorDTO, callback) {
      let postBody = songCoauthorDTO;

      // verify the required parameter 'songCoauthorDTO' is set
      if (songCoauthorDTO === undefined || songCoauthorDTO === null) {
        throw new Error("Missing the required parameter 'songCoauthorDTO' when calling createCoauthorUsingPOST");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SongCoauthorDTO;

      return this.apiClient.callApi(
        '/api/coauthors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoauthorUsingDELETE operation.
     * @callback module:api/SongCoauthorResourceApi~deleteCoauthorUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteCoauthor
     * @param {Number} id id
     * @param {module:api/SongCoauthorResourceApi~deleteCoauthorUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCoauthorUsingDELETE(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCoauthorUsingDELETE");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/coauthors/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCoauthorsUsingGET operation.
     * @callback module:api/SongCoauthorResourceApi~getAllCoauthorsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongCoauthorDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllCoauthors
     * @param {module:api/SongCoauthorResourceApi~getAllCoauthorsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongCoauthorDTO>}
     */
    getAllCoauthorsUsingGET(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongCoauthorDTO];

      return this.apiClient.callApi(
        '/api/coauthors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCoauthorByIdUsingGET operation.
     * @callback module:api/SongCoauthorResourceApi~getCoauthorByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongCoauthorDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCoauthorById
     * @param {Number} id id
     * @param {module:api/SongCoauthorResourceApi~getCoauthorByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongCoauthorDTO}
     */
    getCoauthorByIdUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCoauthorByIdUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SongCoauthorDTO;

      return this.apiClient.callApi(
        '/api/coauthors/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCoauthorsByAuthorIdUsingGET operation.
     * @callback module:api/SongCoauthorResourceApi~getCoauthorsByAuthorIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongCoauthorDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCoauthorsByAuthorId
     * @param {Number} id id
     * @param {module:api/SongCoauthorResourceApi~getCoauthorsByAuthorIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongCoauthorDTO>}
     */
    getCoauthorsByAuthorIdUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCoauthorsByAuthorIdUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongCoauthorDTO];

      return this.apiClient.callApi(
        '/api/coauthors/author/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCoauthorsByFunctionUsingGET operation.
     * @callback module:api/SongCoauthorResourceApi~getCoauthorsByFunctionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongCoauthorDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCoauthorsByFunction
     * @param {module:model/String} _function function
     * @param {module:api/SongCoauthorResourceApi~getCoauthorsByFunctionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongCoauthorDTO>}
     */
    getCoauthorsByFunctionUsingGET(_function, callback) {
      let postBody = null;

      // verify the required parameter '_function' is set
      if (_function === undefined || _function === null) {
        throw new Error("Missing the required parameter '_function' when calling getCoauthorsByFunctionUsingGET");
      }


      let pathParams = {
        'function': _function
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongCoauthorDTO];

      return this.apiClient.callApi(
        '/api/coauthors/function/{function}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCoauthorsBySongIdUsingGET operation.
     * @callback module:api/SongCoauthorResourceApi~getCoauthorsBySongIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongCoauthorDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCoauthorsBySongId
     * @param {Number} id id
     * @param {module:api/SongCoauthorResourceApi~getCoauthorsBySongIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongCoauthorDTO>}
     */
    getCoauthorsBySongIdUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCoauthorsBySongIdUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongCoauthorDTO];

      return this.apiClient.callApi(
        '/api/coauthors/song/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCoauthorUsingPUT operation.
     * @callback module:api/SongCoauthorResourceApi~updateCoauthorUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongCoauthorDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCoauthor
     * @param {module:model/SongCoauthorDTO} songCoauthorDTO songCoauthorDTO
     * @param {module:api/SongCoauthorResourceApi~updateCoauthorUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongCoauthorDTO}
     */
    updateCoauthorUsingPUT(songCoauthorDTO, callback) {
      let postBody = songCoauthorDTO;

      // verify the required parameter 'songCoauthorDTO' is set
      if (songCoauthorDTO === undefined || songCoauthorDTO === null) {
        throw new Error("Missing the required parameter 'songCoauthorDTO' when calling updateCoauthorUsingPUT");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SongCoauthorDTO;

      return this.apiClient.callApi(
        '/api/coauthors', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
