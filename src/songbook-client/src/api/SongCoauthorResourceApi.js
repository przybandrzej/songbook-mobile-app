/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SongCoauthorDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SongCoauthorDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.SongbookApi) {
      root.SongbookApi = {};
    }
    root.SongbookApi.SongCoauthorResourceApi = factory(root.SongbookApi.ApiClient, root.SongbookApi.SongCoauthorDTO);
  }
}(this, function(ApiClient, SongCoauthorDTO) {
  'use strict';

  /**
   * SongCoauthorResource service.
   * @module api/SongCoauthorResourceApi
   * @version 1.5.5
   */

  /**
   * Constructs a new SongCoauthorResourceApi. 
   * @alias module:api/SongCoauthorResourceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createUsingPOST3 operation.
     * @callback module:api/SongCoauthorResourceApi~createUsingPOST3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SongCoauthorDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create
     * @param {module:model/SongCoauthorDTO} songCoauthorDTO songCoauthorDTO
     * @param {module:api/SongCoauthorResourceApi~createUsingPOST3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongCoauthorDTO}
     */
    this.createUsingPOST3 = function(songCoauthorDTO, callback) {
      var postBody = songCoauthorDTO;

      // verify the required parameter 'songCoauthorDTO' is set
      if (songCoauthorDTO === undefined || songCoauthorDTO === null) {
        throw new Error("Missing the required parameter 'songCoauthorDTO' when calling createUsingPOST3");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = SongCoauthorDTO;

      return this.apiClient.callApi(
        '/api/coauthors', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUsingDELETE3 operation.
     * @callback module:api/SongCoauthorResourceApi~deleteUsingDELETE3Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete
     * @param {Number} authorId authorId
     * @param {String} _function function
     * @param {Number} songId songId
     * @param {module:api/SongCoauthorResourceApi~deleteUsingDELETE3Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteUsingDELETE3 = function(authorId, _function, songId, callback) {
      var postBody = null;

      // verify the required parameter 'authorId' is set
      if (authorId === undefined || authorId === null) {
        throw new Error("Missing the required parameter 'authorId' when calling deleteUsingDELETE3");
      }

      // verify the required parameter '_function' is set
      if (_function === undefined || _function === null) {
        throw new Error("Missing the required parameter '_function' when calling deleteUsingDELETE3");
      }

      // verify the required parameter 'songId' is set
      if (songId === undefined || songId === null) {
        throw new Error("Missing the required parameter 'songId' when calling deleteUsingDELETE3");
      }


      var pathParams = {
        'authorId': authorId,
        'function': _function,
        'songId': songId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/coauthors/{songId}/{authorId}/{function}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByAuthorIdUsingGET operation.
     * @callback module:api/SongCoauthorResourceApi~getByAuthorIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongCoauthorDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getByAuthorId
     * @param {Number} id id
     * @param {module:api/SongCoauthorResourceApi~getByAuthorIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongCoauthorDTO>}
     */
    this.getByAuthorIdUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByAuthorIdUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [SongCoauthorDTO];

      return this.apiClient.callApi(
        '/api/coauthors/author/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByFunctionUsingGET operation.
     * @callback module:api/SongCoauthorResourceApi~getByFunctionUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongCoauthorDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getByFunction
     * @param {module:model/String} _function function
     * @param {module:api/SongCoauthorResourceApi~getByFunctionUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongCoauthorDTO>}
     */
    this.getByFunctionUsingGET = function(_function, callback) {
      var postBody = null;

      // verify the required parameter '_function' is set
      if (_function === undefined || _function === null) {
        throw new Error("Missing the required parameter '_function' when calling getByFunctionUsingGET");
      }


      var pathParams = {
        'function': _function
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [SongCoauthorDTO];

      return this.apiClient.callApi(
        '/api/coauthors/function/{function}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBySongIdUsingGET operation.
     * @callback module:api/SongCoauthorResourceApi~getBySongIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongCoauthorDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBySongId
     * @param {Number} id id
     * @param {module:api/SongCoauthorResourceApi~getBySongIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongCoauthorDTO>}
     */
    this.getBySongIdUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBySongIdUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [SongCoauthorDTO];

      return this.apiClient.callApi(
        '/api/coauthors/song/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUsingPUT3 operation.
     * @callback module:api/SongCoauthorResourceApi~updateUsingPUT3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SongCoauthorDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update
     * @param {module:model/SongCoauthorDTO} songCoauthorDTO songCoauthorDTO
     * @param {module:api/SongCoauthorResourceApi~updateUsingPUT3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongCoauthorDTO}
     */
    this.updateUsingPUT3 = function(songCoauthorDTO, callback) {
      var postBody = songCoauthorDTO;

      // verify the required parameter 'songCoauthorDTO' is set
      if (songCoauthorDTO === undefined || songCoauthorDTO === null) {
        throw new Error("Missing the required parameter 'songCoauthorDTO' when calling updateUsingPUT3");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = SongCoauthorDTO;

      return this.apiClient.callApi(
        '/api/coauthors', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
