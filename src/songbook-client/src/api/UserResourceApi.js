/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {PlaylistDTO} from '../model/PlaylistDTO';
import {UserDTO} from '../model/UserDTO';
import {UserSongRatingDTO} from '../model/UserSongRatingDTO';

/**
* UserResource service.
* @module api/UserResourceApi
* @version 1.5.5
*/
export class UserResourceApi {

    /**
    * Constructs a new UserResourceApi. 
    * @alias module:api/UserResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addSongToLibraryUsingPATCH operation.
     * @callback module:api/UserResourceApi~addSongToLibraryUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addSongToLibrary
     * @param {Number} id id
     * @param {Number} songId songId
     * @param {module:api/UserResourceApi~addSongToLibraryUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addSongToLibraryUsingPATCH(id, songId, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addSongToLibraryUsingPATCH");
      }

      // verify the required parameter 'songId' is set
      if (songId === undefined || songId === null) {
        throw new Error("Missing the required parameter 'songId' when calling addSongToLibraryUsingPATCH");
      }


      let pathParams = {
        'id': id,
        'songId': songId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/users/{id}/add-song/{songId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUsingDELETE6 operation.
     * @callback module:api/UserResourceApi~deleteUsingDELETE6Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete
     * @param {Number} id id
     * @param {module:api/UserResourceApi~deleteUsingDELETE6Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUsingDELETE6(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUsingDELETE6");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/users/id/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllUsingGET6 operation.
     * @callback module:api/UserResourceApi~getAllUsingGET6Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAll
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit limit
     * @param {module:api/UserResourceApi~getAllUsingGET6Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserDTO>}
     */
    getAllUsingGET6(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UserDTO];

      return this.apiClient.callApi(
        '/api/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByIdUsingGET6 operation.
     * @callback module:api/UserResourceApi~getByIdUsingGET6Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getById
     * @param {Number} id id
     * @param {module:api/UserResourceApi~getByIdUsingGET6Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    getByIdUsingGET6(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdUsingGET6");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserDTO;

      return this.apiClient.callApi(
        '/api/users/id/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlaylistsByUserIdUsingGET operation.
     * @callback module:api/UserResourceApi~getPlaylistsByUserIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlaylistDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getPlaylistsByUserId
     * @param {Number} id id
     * @param {module:api/UserResourceApi~getPlaylistsByUserIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlaylistDTO>}
     */
    getPlaylistsByUserIdUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPlaylistsByUserIdUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [PlaylistDTO];

      return this.apiClient.callApi(
        '/api/users/id/{id}/playlists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRatingsByUserIdUsingGET operation.
     * @callback module:api/UserResourceApi~getRatingsByUserIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserSongRatingDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getRatingsByUserId
     * @param {Number} id id
     * @param {module:api/UserResourceApi~getRatingsByUserIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserSongRatingDTO>}
     */
    getRatingsByUserIdUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRatingsByUserIdUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UserSongRatingDTO];

      return this.apiClient.callApi(
        '/api/users/id/{id}/ratings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeSongFromLibraryUsingPATCH operation.
     * @callback module:api/UserResourceApi~removeSongFromLibraryUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removeSongFromLibrary
     * @param {Number} id id
     * @param {Number} songId songId
     * @param {module:api/UserResourceApi~removeSongFromLibraryUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeSongFromLibraryUsingPATCH(id, songId, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeSongFromLibraryUsingPATCH");
      }

      // verify the required parameter 'songId' is set
      if (songId === undefined || songId === null) {
        throw new Error("Missing the required parameter 'songId' when calling removeSongFromLibraryUsingPATCH");
      }


      let pathParams = {
        'id': id,
        'songId': songId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/users/{id}/remove-song/{songId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
