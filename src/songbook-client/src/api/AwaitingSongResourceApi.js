/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {SongDTO} from '../model/SongDTO';

/**
* AwaitingSongResource service.
* @module api/AwaitingSongResourceApi
* @version 1.5.5
*/
export class AwaitingSongResourceApi {

    /**
    * Constructs a new AwaitingSongResourceApi. 
    * @alias module:api/AwaitingSongResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAllAwaitingSongsUsingGET operation.
     * @callback module:api/AwaitingSongResourceApi~getAllAwaitingSongsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllAwaitingSongs
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit limit
     * @param {module:api/AwaitingSongResourceApi~getAllAwaitingSongsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    getAllAwaitingSongsUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/awaiting-songs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAwaitingSongByIdUsingGET operation.
     * @callback module:api/AwaitingSongResourceApi~getAwaitingSongByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAwaitingSongById
     * @param {Number} id id
     * @param {module:api/AwaitingSongResourceApi~getAwaitingSongByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongDTO}
     */
    getAwaitingSongByIdUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAwaitingSongByIdUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SongDTO;

      return this.apiClient.callApi(
        '/api/awaiting-songs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAwaitingSongByTitleFragmentUsingGET operation.
     * @callback module:api/AwaitingSongResourceApi~getAwaitingSongByTitleFragmentUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAwaitingSongByTitleFragment
     * @param {String} title title
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit limit
     * @param {module:api/AwaitingSongResourceApi~getAwaitingSongByTitleFragmentUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    getAwaitingSongByTitleFragmentUsingGET(title, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling getAwaitingSongByTitleFragmentUsingGET");
      }


      let pathParams = {
        'title': title
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/awaiting-songs/title/{title}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
