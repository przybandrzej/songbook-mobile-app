/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SongDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SongDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.SongbookApi) {
      root.SongbookApi = {};
    }
    root.SongbookApi.AwaitingSongResourceApi = factory(root.SongbookApi.ApiClient, root.SongbookApi.SongDTO);
  }
}(this, function(ApiClient, SongDTO) {
  'use strict';

  /**
   * AwaitingSongResource service.
   * @module api/AwaitingSongResourceApi
   * @version 1.5.5
   */

  /**
   * Constructs a new AwaitingSongResourceApi. 
   * @alias module:api/AwaitingSongResourceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAllUsingGET1 operation.
     * @callback module:api/AwaitingSongResourceApi~getAllUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAll
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit limit
     * @param {module:api/AwaitingSongResourceApi~getAllUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    this.getAllUsingGET1 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/awaiting-songs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByCategoryUsingGET operation.
     * @callback module:api/AwaitingSongResourceApi~getByCategoryUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getByCategory
     * @param {Number} categoryId categoryId
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit limit
     * @param {module:api/AwaitingSongResourceApi~getByCategoryUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    this.getByCategoryUsingGET = function(categoryId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getByCategoryUsingGET");
      }


      var pathParams = {
        'categoryId': categoryId
      };
      var queryParams = {
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/awaiting-songs/category/{categoryId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByIdUsingGET1 operation.
     * @callback module:api/AwaitingSongResourceApi~getByIdUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SongDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getById
     * @param {Number} id id
     * @param {module:api/AwaitingSongResourceApi~getByIdUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongDTO}
     */
    this.getByIdUsingGET1 = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdUsingGET1");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = SongDTO;

      return this.apiClient.callApi(
        '/api/awaiting-songs/id/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByLyricsFragmentUsingGET operation.
     * @callback module:api/AwaitingSongResourceApi~getByLyricsFragmentUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getByLyricsFragment
     * @param {String} value value
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit limit
     * @param {module:api/AwaitingSongResourceApi~getByLyricsFragmentUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    this.getByLyricsFragmentUsingGET = function(value, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling getByLyricsFragmentUsingGET");
      }


      var pathParams = {
        'value': value
      };
      var queryParams = {
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/awaiting-songs/lyrics_fragment/{value}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByTagUsingGET operation.
     * @callback module:api/AwaitingSongResourceApi~getByTagUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getByTag
     * @param {Number} tagId tagId
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit limit
     * @param {module:api/AwaitingSongResourceApi~getByTagUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    this.getByTagUsingGET = function(tagId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getByTagUsingGET");
      }


      var pathParams = {
        'tagId': tagId
      };
      var queryParams = {
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/awaiting-songs/tag/{tagId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByTitleFragmentUsingGET operation.
     * @callback module:api/AwaitingSongResourceApi~getByTitleFragmentUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getByTitleFragment
     * @param {String} title title
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit limit
     * @param {module:api/AwaitingSongResourceApi~getByTitleFragmentUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    this.getByTitleFragmentUsingGET = function(title, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling getByTitleFragmentUsingGET");
      }


      var pathParams = {
        'title': title
      };
      var queryParams = {
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/awaiting-songs/title/{title}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLatestUsingGET operation.
     * @callback module:api/AwaitingSongResourceApi~getLatestUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getLatest
     * @param {Number} limit limit
     * @param {module:api/AwaitingSongResourceApi~getLatestUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    this.getLatestUsingGET = function(limit, callback) {
      var postBody = null;

      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling getLatestUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'limit': limit,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/awaiting-songs/latest', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
