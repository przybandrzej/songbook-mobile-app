/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {CreateLineDTO} from '../model/CreateLineDTO';
import {LineDTO} from '../model/LineDTO';
import {VerseDTO} from '../model/VerseDTO';

/**
* VerseResource service.
* @module api/VerseResourceApi
* @version 1.5.5
*/
export class VerseResourceApi {

    /**
    * Constructs a new VerseResourceApi. 
    * @alias module:api/VerseResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addLineUsingPATCH operation.
     * @callback module:api/VerseResourceApi~addLineUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addLine
     * @param {Number} id id
     * @param {module:model/CreateLineDTO} line line
     * @param {module:api/VerseResourceApi~addLineUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addLineUsingPATCH(id, line, callback) {
      let postBody = line;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addLineUsingPATCH");
      }

      // verify the required parameter 'line' is set
      if (line === undefined || line === null) {
        throw new Error("Missing the required parameter 'line' when calling addLineUsingPATCH");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/verses/{id}/add-line', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllVersesUsingGET operation.
     * @callback module:api/VerseResourceApi~getAllVersesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VerseDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllVerses
     * @param {module:api/VerseResourceApi~getAllVersesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VerseDTO>}
     */
    getAllVersesUsingGET(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [VerseDTO];

      return this.apiClient.callApi(
        '/api/verses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVerseByIdUsingGET operation.
     * @callback module:api/VerseResourceApi~getVerseByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getVerseById
     * @param {Number} id id
     * @param {module:api/VerseResourceApi~getVerseByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerseDTO}
     */
    getVerseByIdUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVerseByIdUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = VerseDTO;

      return this.apiClient.callApi(
        '/api/verses/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVerseLinesUsingGET operation.
     * @callback module:api/VerseResourceApi~getVerseLinesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LineDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getVerseLines
     * @param {Number} id id
     * @param {module:api/VerseResourceApi~getVerseLinesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LineDTO>}
     */
    getVerseLinesUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVerseLinesUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [LineDTO];

      return this.apiClient.callApi(
        '/api/verses/{id}/lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeLineUsingPATCH operation.
     * @callback module:api/VerseResourceApi~removeLineUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removeLine
     * @param {Number} id id
     * @param {Number} lineId lineId
     * @param {module:api/VerseResourceApi~removeLineUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeLineUsingPATCH(id, lineId, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeLineUsingPATCH");
      }

      // verify the required parameter 'lineId' is set
      if (lineId === undefined || lineId === null) {
        throw new Error("Missing the required parameter 'lineId' when calling removeLineUsingPATCH");
      }


      let pathParams = {
        'id': id,
        'lineId': lineId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/verses/{id}/remove-line/{lineId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVerseUsingPUT operation.
     * @callback module:api/VerseResourceApi~updateVerseUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateVerse
     * @param {module:model/VerseDTO} verseDTO verseDTO
     * @param {module:api/VerseResourceApi~updateVerseUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerseDTO}
     */
    updateVerseUsingPUT(verseDTO, callback) {
      let postBody = verseDTO;

      // verify the required parameter 'verseDTO' is set
      if (verseDTO === undefined || verseDTO === null) {
        throw new Error("Missing the required parameter 'verseDTO' when calling updateVerseUsingPUT");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = VerseDTO;

      return this.apiClient.callApi(
        '/api/verses', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
