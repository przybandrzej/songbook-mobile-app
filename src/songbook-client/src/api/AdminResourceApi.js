/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {UserDTO} from '../model/UserDTO';

/**
* AdminResource service.
* @module api/AdminResourceApi
* @version 1.5.5
*/
export class AdminResourceApi {

    /**
    * Constructs a new AdminResourceApi. 
    * @alias module:api/AdminResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateUserUsingPATCH operation.
     * @callback module:api/AdminResourceApi~activateUserUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * activateUser
     * @param {Number} userId userId
     * @param {module:api/AdminResourceApi~activateUserUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    activateUserUsingPATCH(userId, callback) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling activateUserUsingPATCH");
      }


      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserDTO;

      return this.apiClient.callApi(
        '/api/admin/{userId}/activate-user', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserRoleUsingPATCH operation.
     * @callback module:api/AdminResourceApi~updateUserRoleUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateUserRole
     * @param {Number} roleId roleId
     * @param {Number} userId userId
     * @param {module:api/AdminResourceApi~updateUserRoleUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    updateUserRoleUsingPATCH(roleId, userId, callback) {
      let postBody = null;

      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling updateUserRoleUsingPATCH");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserRoleUsingPATCH");
      }


      let pathParams = {
        'roleId': roleId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserDTO;

      return this.apiClient.callApi(
        '/api/admin/{userId}/update-role/{roleId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
