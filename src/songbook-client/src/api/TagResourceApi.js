/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {SongDTO} from '../model/SongDTO';
import {TagDTO} from '../model/TagDTO';
import {UniversalCreateDTO} from '../model/UniversalCreateDTO';

/**
* TagResource service.
* @module api/TagResourceApi
* @version 1.5.5
*/
export class TagResourceApi {

    /**
    * Constructs a new TagResourceApi. 
    * @alias module:api/TagResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createUsingPOST5 operation.
     * @callback module:api/TagResourceApi~createUsingPOST5Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TagDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create
     * @param {module:model/UniversalCreateDTO} tagDto tagDto
     * @param {module:api/TagResourceApi~createUsingPOST5Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagDTO}
     */
    createUsingPOST5(tagDto, callback) {
      let postBody = tagDto;

      // verify the required parameter 'tagDto' is set
      if (tagDto === undefined || tagDto === null) {
        throw new Error("Missing the required parameter 'tagDto' when calling createUsingPOST5");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TagDTO;

      return this.apiClient.callApi(
        '/api/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUsingDELETE5 operation.
     * @callback module:api/TagResourceApi~deleteUsingDELETE5Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete
     * @param {Number} id id
     * @param {module:api/TagResourceApi~deleteUsingDELETE5Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUsingDELETE5(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUsingDELETE5");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/tags/id/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllUsingGET5 operation.
     * @callback module:api/TagResourceApi~getAllUsingGET5Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAll
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit limit
     * @param {module:api/TagResourceApi~getAllUsingGET5Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagDTO>}
     */
    getAllUsingGET5(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TagDTO];

      return this.apiClient.callApi(
        '/api/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByIdUsingGET5 operation.
     * @callback module:api/TagResourceApi~getByIdUsingGET5Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TagDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getById
     * @param {Number} id id
     * @param {module:api/TagResourceApi~getByIdUsingGET5Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagDTO}
     */
    getByIdUsingGET5(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdUsingGET5");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TagDTO;

      return this.apiClient.callApi(
        '/api/tags/id/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByNameUsingGET2 operation.
     * @callback module:api/TagResourceApi~getByNameUsingGET2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getByName
     * @param {String} name name
     * @param {module:api/TagResourceApi~getByNameUsingGET2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagDTO>}
     */
    getByNameUsingGET2(name, callback) {
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getByNameUsingGET2");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TagDTO];

      return this.apiClient.callApi(
        '/api/tags/name/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongsByTagIdUsingGET operation.
     * @callback module:api/TagResourceApi~getSongsByTagIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongsByTagId
     * @param {Number} id id
     * @param {module:api/TagResourceApi~getSongsByTagIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    getSongsByTagIdUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongsByTagIdUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/tags/id/{id}/songs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUsingPUT5 operation.
     * @callback module:api/TagResourceApi~updateUsingPUT5Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TagDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update
     * @param {module:model/TagDTO} tagDto tagDto
     * @param {module:api/TagResourceApi~updateUsingPUT5Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagDTO}
     */
    updateUsingPUT5(tagDto, callback) {
      let postBody = tagDto;

      // verify the required parameter 'tagDto' is set
      if (tagDto === undefined || tagDto === null) {
        throw new Error("Missing the required parameter 'tagDto' when calling updateUsingPUT5");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TagDTO;

      return this.apiClient.callApi(
        '/api/tags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
