/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AuthorDTO', 'model/SongDTO', 'model/UniversalCreateDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AuthorDTO'), require('../model/SongDTO'), require('../model/UniversalCreateDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.SongbookApi) {
      root.SongbookApi = {};
    }
    root.SongbookApi.AuthorResourceApi = factory(root.SongbookApi.ApiClient, root.SongbookApi.AuthorDTO, root.SongbookApi.SongDTO, root.SongbookApi.UniversalCreateDTO);
  }
}(this, function(ApiClient, AuthorDTO, SongDTO, UniversalCreateDTO) {
  'use strict';

  /**
   * AuthorResource service.
   * @module api/AuthorResourceApi
   * @version 1.5.5
   */

  /**
   * Constructs a new AuthorResourceApi. 
   * @alias module:api/AuthorResourceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createUsingPOST operation.
     * @callback module:api/AuthorResourceApi~createUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create
     * @param {module:model/UniversalCreateDTO} authorDto authorDto
     * @param {module:api/AuthorResourceApi~createUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorDTO}
     */
    this.createUsingPOST = function(authorDto, callback) {
      var postBody = authorDto;

      // verify the required parameter 'authorDto' is set
      if (authorDto === undefined || authorDto === null) {
        throw new Error("Missing the required parameter 'authorDto' when calling createUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AuthorDTO;

      return this.apiClient.callApi(
        '/api/authors', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUsingDELETE operation.
     * @callback module:api/AuthorResourceApi~deleteUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete
     * @param {Number} id id
     * @param {module:api/AuthorResourceApi~deleteUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteUsingDELETE = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUsingDELETE");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/authors/id/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllUsingGET operation.
     * @callback module:api/AuthorResourceApi~getAllUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AuthorDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAll
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit limit
     * @param {module:api/AuthorResourceApi~getAllUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AuthorDTO>}
     */
    this.getAllUsingGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [AuthorDTO];

      return this.apiClient.callApi(
        '/api/authors', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByIdUsingGET operation.
     * @callback module:api/AuthorResourceApi~getByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getById
     * @param {Number} id id
     * @param {module:api/AuthorResourceApi~getByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorDTO}
     */
    this.getByIdUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = AuthorDTO;

      return this.apiClient.callApi(
        '/api/authors/id/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByNameFragmentUsingGET operation.
     * @callback module:api/AuthorResourceApi~getByNameFragmentUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AuthorDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getByNameFragment
     * @param {String} name name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit limit
     * @param {module:api/AuthorResourceApi~getByNameFragmentUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AuthorDTO>}
     */
    this.getByNameFragmentUsingGET = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getByNameFragmentUsingGET");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [AuthorDTO];

      return this.apiClient.callApi(
        '/api/authors/name/{name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongsByAuthorIdUsingGET operation.
     * @callback module:api/AuthorResourceApi~getSongsByAuthorIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongsByAuthorId
     * @param {Number} id id
     * @param {module:api/AuthorResourceApi~getSongsByAuthorIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    this.getSongsByAuthorIdUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongsByAuthorIdUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/authors/id/{id}/songs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUsingPUT operation.
     * @callback module:api/AuthorResourceApi~updateUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update
     * @param {module:model/AuthorDTO} authorDto authorDto
     * @param {module:api/AuthorResourceApi~updateUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorDTO}
     */
    this.updateUsingPUT = function(authorDto, callback) {
      var postBody = authorDto;

      // verify the required parameter 'authorDto' is set
      if (authorDto === undefined || authorDto === null) {
        throw new Error("Missing the required parameter 'authorDto' when calling updateUsingPUT");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AuthorDTO;

      return this.apiClient.callApi(
        '/api/authors', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
