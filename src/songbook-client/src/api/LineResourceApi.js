/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {CreateGuitarCordDTO} from '../model/CreateGuitarCordDTO';
import {GuitarCordDTO} from '../model/GuitarCordDTO';
import {LineDTO} from '../model/LineDTO';

/**
* LineResource service.
* @module api/LineResourceApi
* @version 1.5.5
*/
export class LineResourceApi {

    /**
    * Constructs a new LineResourceApi. 
    * @alias module:api/LineResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addGuitarCordUsingPATCH operation.
     * @callback module:api/LineResourceApi~addGuitarCordUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GuitarCordDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addGuitarCord
     * @param {module:model/CreateGuitarCordDTO} cord cord
     * @param {Number} id id
     * @param {module:api/LineResourceApi~addGuitarCordUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GuitarCordDTO}
     */
    addGuitarCordUsingPATCH(cord, id, callback) {
      let postBody = cord;

      // verify the required parameter 'cord' is set
      if (cord === undefined || cord === null) {
        throw new Error("Missing the required parameter 'cord' when calling addGuitarCordUsingPATCH");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addGuitarCordUsingPATCH");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = GuitarCordDTO;

      return this.apiClient.callApi(
        '/api/lines/{id}/add-guitar-cord', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllLinesUsingGET operation.
     * @callback module:api/LineResourceApi~getAllLinesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LineDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllLines
     * @param {module:api/LineResourceApi~getAllLinesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LineDTO>}
     */
    getAllLinesUsingGET(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [LineDTO];

      return this.apiClient.callApi(
        '/api/lines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLineByIdUsingGET operation.
     * @callback module:api/LineResourceApi~getLineByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LineDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getLineById
     * @param {Number} id id
     * @param {module:api/LineResourceApi~getLineByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LineDTO}
     */
    getLineByIdUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLineByIdUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = LineDTO;

      return this.apiClient.callApi(
        '/api/lines/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLineCordsUsingGET operation.
     * @callback module:api/LineResourceApi~getLineCordsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GuitarCordDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getLineCords
     * @param {Number} id id
     * @param {module:api/LineResourceApi~getLineCordsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GuitarCordDTO>}
     */
    getLineCordsUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLineCordsUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [GuitarCordDTO];

      return this.apiClient.callApi(
        '/api/lines/{id}/guitar-cords', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeGuitarCordUsingPATCH operation.
     * @callback module:api/LineResourceApi~removeGuitarCordUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removeGuitarCord
     * @param {Number} cordId cordId
     * @param {Number} id id
     * @param {module:api/LineResourceApi~removeGuitarCordUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeGuitarCordUsingPATCH(cordId, id, callback) {
      let postBody = null;

      // verify the required parameter 'cordId' is set
      if (cordId === undefined || cordId === null) {
        throw new Error("Missing the required parameter 'cordId' when calling removeGuitarCordUsingPATCH");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeGuitarCordUsingPATCH");
      }


      let pathParams = {
        'cordId': cordId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/lines/{id}/remove-guitar-cord/{cordId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLineUsingPUT operation.
     * @callback module:api/LineResourceApi~updateLineUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LineDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateLine
     * @param {module:model/LineDTO} lineDTO lineDTO
     * @param {module:api/LineResourceApi~updateLineUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LineDTO}
     */
    updateLineUsingPUT(lineDTO, callback) {
      let postBody = lineDTO;

      // verify the required parameter 'lineDTO' is set
      if (lineDTO === undefined || lineDTO === null) {
        throw new Error("Missing the required parameter 'lineDTO' when calling updateLineUsingPUT");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = LineDTO;

      return this.apiClient.callApi(
        '/api/lines', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
