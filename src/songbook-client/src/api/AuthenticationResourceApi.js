/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {EmailChangeDTO} from '../model/EmailChangeDTO';
import {LoginForm} from '../model/LoginForm';
import {PasswordChangeDTO} from '../model/PasswordChangeDTO';
import {RegisterNewUserForm} from '../model/RegisterNewUserForm';
import {TokenAndPasswordDTO} from '../model/TokenAndPasswordDTO';
import {TokenDTO} from '../model/TokenDTO';
import {UserDTO} from '../model/UserDTO';

/**
* AuthenticationResource service.
* @module api/AuthenticationResourceApi
* @version 1.5.5
*/
export class AuthenticationResourceApi {

    /**
    * Constructs a new AuthenticationResourceApi. 
    * @alias module:api/AuthenticationResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateAccountUsingGET operation.
     * @callback module:api/AuthenticationResourceApi~activateAccountUsingGETCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * activateAccount
     * @param {String} key key
     * @param {module:api/AuthenticationResourceApi~activateAccountUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activateAccountUsingGET(key, callback) {
      let postBody = null;

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling activateAccountUsingGET");
      }


      let pathParams = {
      };
      let queryParams = {
        'key': key
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/activate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authenticateUsingPOST operation.
     * @callback module:api/AuthenticationResourceApi~authenticateUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * authenticate
     * @param {module:model/LoginForm} form form
     * @param {module:api/AuthenticationResourceApi~authenticateUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenDTO}
     */
    authenticateUsingPOST(form, callback) {
      let postBody = form;

      // verify the required parameter 'form' is set
      if (form === undefined || form === null) {
        throw new Error("Missing the required parameter 'form' when calling authenticateUsingPOST");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TokenDTO;

      return this.apiClient.callApi(
        '/api/authenticate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changeEmailUsingPATCH operation.
     * @callback module:api/AuthenticationResourceApi~changeEmailUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * changeEmail
     * @param {module:model/EmailChangeDTO} emailChangeDTO emailChangeDTO
     * @param {module:api/AuthenticationResourceApi~changeEmailUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeEmailUsingPATCH(emailChangeDTO, callback) {
      let postBody = emailChangeDTO;

      // verify the required parameter 'emailChangeDTO' is set
      if (emailChangeDTO === undefined || emailChangeDTO === null) {
        throw new Error("Missing the required parameter 'emailChangeDTO' when calling changeEmailUsingPATCH");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/account/change-email', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changePasswordUsingPOST operation.
     * @callback module:api/AuthenticationResourceApi~changePasswordUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * changePassword
     * @param {module:model/PasswordChangeDTO} passwordChangeDto passwordChangeDto
     * @param {module:api/AuthenticationResourceApi~changePasswordUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changePasswordUsingPOST(passwordChangeDto, callback) {
      let postBody = passwordChangeDto;

      // verify the required parameter 'passwordChangeDto' is set
      if (passwordChangeDto === undefined || passwordChangeDto === null) {
        throw new Error("Missing the required parameter 'passwordChangeDto' when calling changePasswordUsingPOST");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/account/change-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the finishPasswordResetUsingPOST operation.
     * @callback module:api/AuthenticationResourceApi~finishPasswordResetUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * finishPasswordReset
     * @param {module:model/TokenAndPasswordDTO} keyAndPassword keyAndPassword
     * @param {module:api/AuthenticationResourceApi~finishPasswordResetUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    finishPasswordResetUsingPOST(keyAndPassword, callback) {
      let postBody = keyAndPassword;

      // verify the required parameter 'keyAndPassword' is set
      if (keyAndPassword === undefined || keyAndPassword === null) {
        throw new Error("Missing the required parameter 'keyAndPassword' when calling finishPasswordResetUsingPOST");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/account/reset-password/finish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountUsingGET operation.
     * @callback module:api/AuthenticationResourceApi~getAccountUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAccount
     * @param {module:api/AuthenticationResourceApi~getAccountUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    getAccountUsingGET(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserDTO;

      return this.apiClient.callApi(
        '/api/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the isAuthenticatedUsingGET operation.
     * @callback module:api/AuthenticationResourceApi~isAuthenticatedUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * isAuthenticated
     * @param {module:api/AuthenticationResourceApi~isAuthenticatedUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    isAuthenticatedUsingGET(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Boolean';

      return this.apiClient.callApi(
        '/api/is-authenticated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerUsingPOST operation.
     * @callback module:api/AuthenticationResourceApi~registerUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * register
     * @param {module:model/RegisterNewUserForm} form form
     * @param {module:api/AuthenticationResourceApi~registerUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    registerUsingPOST(form, callback) {
      let postBody = form;

      // verify the required parameter 'form' is set
      if (form === undefined || form === null) {
        throw new Error("Missing the required parameter 'form' when calling registerUsingPOST");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the requestPasswordResetUsingPOST operation.
     * @callback module:api/AuthenticationResourceApi~requestPasswordResetUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * requestPasswordReset
     * @param {String} mail mail
     * @param {module:api/AuthenticationResourceApi~requestPasswordResetUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    requestPasswordResetUsingPOST(mail, callback) {
      let postBody = mail;

      // verify the required parameter 'mail' is set
      if (mail === undefined || mail === null) {
        throw new Error("Missing the required parameter 'mail' when calling requestPasswordResetUsingPOST");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/account/reset-password/init', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAccountUsingPOST operation.
     * @callback module:api/AuthenticationResourceApi~saveAccountUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * saveAccount
     * @param {module:model/UserDTO} userDTO userDTO
     * @param {module:api/AuthenticationResourceApi~saveAccountUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    saveAccountUsingPOST(userDTO, callback) {
      let postBody = userDTO;

      // verify the required parameter 'userDTO' is set
      if (userDTO === undefined || userDTO === null) {
        throw new Error("Missing the required parameter 'userDTO' when calling saveAccountUsingPOST");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserDTO;

      return this.apiClient.callApi(
        '/api/account', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
