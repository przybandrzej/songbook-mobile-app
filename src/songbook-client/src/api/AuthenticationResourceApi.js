/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EmailChangeDTO', 'model/LoginForm', 'model/PasswordChangeDTO', 'model/RegisterNewUserForm', 'model/TokenAndPasswordDTO', 'model/TokenDTO', 'model/UserDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/EmailChangeDTO'), require('../model/LoginForm'), require('../model/PasswordChangeDTO'), require('../model/RegisterNewUserForm'), require('../model/TokenAndPasswordDTO'), require('../model/TokenDTO'), require('../model/UserDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.SongbookApi) {
      root.SongbookApi = {};
    }
    root.SongbookApi.AuthenticationResourceApi = factory(root.SongbookApi.ApiClient, root.SongbookApi.EmailChangeDTO, root.SongbookApi.LoginForm, root.SongbookApi.PasswordChangeDTO, root.SongbookApi.RegisterNewUserForm, root.SongbookApi.TokenAndPasswordDTO, root.SongbookApi.TokenDTO, root.SongbookApi.UserDTO);
  }
}(this, function(ApiClient, EmailChangeDTO, LoginForm, PasswordChangeDTO, RegisterNewUserForm, TokenAndPasswordDTO, TokenDTO, UserDTO) {
  'use strict';

  /**
   * AuthenticationResource service.
   * @module api/AuthenticationResourceApi
   * @version 1.5.5
   */

  /**
   * Constructs a new AuthenticationResourceApi. 
   * @alias module:api/AuthenticationResourceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the activateAccountUsingGET operation.
     * @callback module:api/AuthenticationResourceApi~activateAccountUsingGETCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * activateAccount
     * @param {String} key key
     * @param {module:api/AuthenticationResourceApi~activateAccountUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.activateAccountUsingGET = function(key, callback) {
      var postBody = null;

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling activateAccountUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'key': key,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/activate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authenticateUsingPOST operation.
     * @callback module:api/AuthenticationResourceApi~authenticateUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * authenticate
     * @param {module:model/LoginForm} form form
     * @param {module:api/AuthenticationResourceApi~authenticateUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenDTO}
     */
    this.authenticateUsingPOST = function(form, callback) {
      var postBody = form;

      // verify the required parameter 'form' is set
      if (form === undefined || form === null) {
        throw new Error("Missing the required parameter 'form' when calling authenticateUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = TokenDTO;

      return this.apiClient.callApi(
        '/api/authenticate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changeEmailUsingPATCH operation.
     * @callback module:api/AuthenticationResourceApi~changeEmailUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * changeEmail
     * @param {module:model/EmailChangeDTO} emailChangeDTO emailChangeDTO
     * @param {module:api/AuthenticationResourceApi~changeEmailUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.changeEmailUsingPATCH = function(emailChangeDTO, callback) {
      var postBody = emailChangeDTO;

      // verify the required parameter 'emailChangeDTO' is set
      if (emailChangeDTO === undefined || emailChangeDTO === null) {
        throw new Error("Missing the required parameter 'emailChangeDTO' when calling changeEmailUsingPATCH");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/account/change-email', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changePasswordUsingPOST operation.
     * @callback module:api/AuthenticationResourceApi~changePasswordUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * changePassword
     * @param {module:model/PasswordChangeDTO} passwordChangeDto passwordChangeDto
     * @param {module:api/AuthenticationResourceApi~changePasswordUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.changePasswordUsingPOST = function(passwordChangeDto, callback) {
      var postBody = passwordChangeDto;

      // verify the required parameter 'passwordChangeDto' is set
      if (passwordChangeDto === undefined || passwordChangeDto === null) {
        throw new Error("Missing the required parameter 'passwordChangeDto' when calling changePasswordUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/account/change-password', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the finishPasswordResetUsingPOST operation.
     * @callback module:api/AuthenticationResourceApi~finishPasswordResetUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * finishPasswordReset
     * @param {module:model/TokenAndPasswordDTO} keyAndPassword keyAndPassword
     * @param {module:api/AuthenticationResourceApi~finishPasswordResetUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.finishPasswordResetUsingPOST = function(keyAndPassword, callback) {
      var postBody = keyAndPassword;

      // verify the required parameter 'keyAndPassword' is set
      if (keyAndPassword === undefined || keyAndPassword === null) {
        throw new Error("Missing the required parameter 'keyAndPassword' when calling finishPasswordResetUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/account/reset-password/finish', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountUsingGET operation.
     * @callback module:api/AuthenticationResourceApi~getAccountUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAccount
     * @param {module:api/AuthenticationResourceApi~getAccountUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    this.getAccountUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = UserDTO;

      return this.apiClient.callApi(
        '/api/account', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the isAuthenticatedUsingGET operation.
     * @callback module:api/AuthenticationResourceApi~isAuthenticatedUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * isAuthenticated
     * @param {module:api/AuthenticationResourceApi~isAuthenticatedUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.isAuthenticatedUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/api/is-authenticated', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerUsingPOST operation.
     * @callback module:api/AuthenticationResourceApi~registerUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * register
     * @param {module:model/RegisterNewUserForm} form form
     * @param {module:api/AuthenticationResourceApi~registerUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.registerUsingPOST = function(form, callback) {
      var postBody = form;

      // verify the required parameter 'form' is set
      if (form === undefined || form === null) {
        throw new Error("Missing the required parameter 'form' when calling registerUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/register', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the requestPasswordResetUsingPOST operation.
     * @callback module:api/AuthenticationResourceApi~requestPasswordResetUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * requestPasswordReset
     * @param {String} mail mail
     * @param {module:api/AuthenticationResourceApi~requestPasswordResetUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.requestPasswordResetUsingPOST = function(mail, callback) {
      var postBody = mail;

      // verify the required parameter 'mail' is set
      if (mail === undefined || mail === null) {
        throw new Error("Missing the required parameter 'mail' when calling requestPasswordResetUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/account/reset-password/init', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAccountUsingPOST operation.
     * @callback module:api/AuthenticationResourceApi~saveAccountUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * saveAccount
     * @param {module:model/UserDTO} userDTO userDTO
     * @param {module:api/AuthenticationResourceApi~saveAccountUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    this.saveAccountUsingPOST = function(userDTO, callback) {
      var postBody = userDTO;

      // verify the required parameter 'userDTO' is set
      if (userDTO === undefined || userDTO === null) {
        throw new Error("Missing the required parameter 'userDTO' when calling saveAccountUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = UserDTO;

      return this.apiClient.callApi(
        '/api/account', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
