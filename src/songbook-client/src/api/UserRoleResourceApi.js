/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {UniversalCreateDTO} from '../model/UniversalCreateDTO';
import {UserDTO} from '../model/UserDTO';
import {UserRoleDTO} from '../model/UserRoleDTO';

/**
* UserRoleResource service.
* @module api/UserRoleResourceApi
* @version 1.5.5
*/
export class UserRoleResourceApi {

    /**
    * Constructs a new UserRoleResourceApi. 
    * @alias module:api/UserRoleResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createRoleUsingPOST operation.
     * @callback module:api/UserRoleResourceApi~createRoleUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRoleDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createRole
     * @param {module:model/UniversalCreateDTO} userRoleDto userRoleDto
     * @param {module:api/UserRoleResourceApi~createRoleUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRoleDTO}
     */
    createRoleUsingPOST(userRoleDto, callback) {
      let postBody = userRoleDto;

      // verify the required parameter 'userRoleDto' is set
      if (userRoleDto === undefined || userRoleDto === null) {
        throw new Error("Missing the required parameter 'userRoleDto' when calling createRoleUsingPOST");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserRoleDTO;

      return this.apiClient.callApi(
        '/api/user_roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoleUsingDELETE operation.
     * @callback module:api/UserRoleResourceApi~deleteRoleUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteRole
     * @param {Number} id id
     * @param {module:api/UserRoleResourceApi~deleteRoleUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRoleUsingDELETE(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRoleUsingDELETE");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/user_roles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllRolesUsingGET operation.
     * @callback module:api/UserRoleResourceApi~getAllRolesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserRoleDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllRoles
     * @param {module:api/UserRoleResourceApi~getAllRolesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserRoleDTO>}
     */
    getAllRolesUsingGET(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UserRoleDTO];

      return this.apiClient.callApi(
        '/api/user_roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoleByIdUsingGET operation.
     * @callback module:api/UserRoleResourceApi~getRoleByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRoleDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getRoleById
     * @param {Number} id id
     * @param {module:api/UserRoleResourceApi~getRoleByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRoleDTO}
     */
    getRoleByIdUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRoleByIdUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserRoleDTO;

      return this.apiClient.callApi(
        '/api/user_roles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoleByNameSearchQueryUsingGET operation.
     * @callback module:api/UserRoleResourceApi~getRoleByNameSearchQueryUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserRoleDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getRoleByNameSearchQuery
     * @param {String} searchQuery searchQuery
     * @param {module:api/UserRoleResourceApi~getRoleByNameSearchQueryUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserRoleDTO>}
     */
    getRoleByNameSearchQueryUsingGET(searchQuery, callback) {
      let postBody = null;

      // verify the required parameter 'searchQuery' is set
      if (searchQuery === undefined || searchQuery === null) {
        throw new Error("Missing the required parameter 'searchQuery' when calling getRoleByNameSearchQueryUsingGET");
      }


      let pathParams = {
        'searchQuery': searchQuery
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UserRoleDTO];

      return this.apiClient.callApi(
        '/api/user_roles/name/{searchQuery}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserRoleUsersUsingGET operation.
     * @callback module:api/UserRoleResourceApi~getUserRoleUsersUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getUserRoleUsers
     * @param {Number} id id
     * @param {module:api/UserRoleResourceApi~getUserRoleUsersUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserDTO>}
     */
    getUserRoleUsersUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserRoleUsersUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UserDTO];

      return this.apiClient.callApi(
        '/api/user_roles/{id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoleUsingPUT operation.
     * @callback module:api/UserRoleResourceApi~updateRoleUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRoleDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateRole
     * @param {module:model/UserRoleDTO} userRoleDto userRoleDto
     * @param {module:api/UserRoleResourceApi~updateRoleUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRoleDTO}
     */
    updateRoleUsingPUT(userRoleDto, callback) {
      let postBody = userRoleDto;

      // verify the required parameter 'userRoleDto' is set
      if (userRoleDto === undefined || userRoleDto === null) {
        throw new Error("Missing the required parameter 'userRoleDto' when calling updateRoleUsingPUT");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserRoleDTO;

      return this.apiClient.callApi(
        '/api/user_roles', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
