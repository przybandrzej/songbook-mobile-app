/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/UniversalCreateDTO', 'model/UserDTO', 'model/UserRoleDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/UniversalCreateDTO'), require('../model/UserDTO'), require('../model/UserRoleDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.SongbookApi) {
      root.SongbookApi = {};
    }
    root.SongbookApi.UserRoleResourceApi = factory(root.SongbookApi.ApiClient, root.SongbookApi.UniversalCreateDTO, root.SongbookApi.UserDTO, root.SongbookApi.UserRoleDTO);
  }
}(this, function(ApiClient, UniversalCreateDTO, UserDTO, UserRoleDTO) {
  'use strict';

  /**
   * UserRoleResource service.
   * @module api/UserRoleResourceApi
   * @version 1.5.5
   */

  /**
   * Constructs a new UserRoleResourceApi. 
   * @alias module:api/UserRoleResourceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createUsingPOST6 operation.
     * @callback module:api/UserRoleResourceApi~createUsingPOST6Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRoleDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create
     * @param {module:model/UniversalCreateDTO} userRoleDto userRoleDto
     * @param {module:api/UserRoleResourceApi~createUsingPOST6Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRoleDTO}
     */
    this.createUsingPOST6 = function(userRoleDto, callback) {
      var postBody = userRoleDto;

      // verify the required parameter 'userRoleDto' is set
      if (userRoleDto === undefined || userRoleDto === null) {
        throw new Error("Missing the required parameter 'userRoleDto' when calling createUsingPOST6");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = UserRoleDTO;

      return this.apiClient.callApi(
        '/api/user_roles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUsingDELETE7 operation.
     * @callback module:api/UserRoleResourceApi~deleteUsingDELETE7Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete
     * @param {Number} id id
     * @param {module:api/UserRoleResourceApi~deleteUsingDELETE7Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteUsingDELETE7 = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUsingDELETE7");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/user_roles/id/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllUsingGET7 operation.
     * @callback module:api/UserRoleResourceApi~getAllUsingGET7Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserRoleDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAll
     * @param {module:api/UserRoleResourceApi~getAllUsingGET7Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserRoleDTO>}
     */
    this.getAllUsingGET7 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [UserRoleDTO];

      return this.apiClient.callApi(
        '/api/user_roles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByIdUsingGET7 operation.
     * @callback module:api/UserRoleResourceApi~getByIdUsingGET7Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRoleDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getById
     * @param {Number} id id
     * @param {module:api/UserRoleResourceApi~getByIdUsingGET7Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRoleDTO}
     */
    this.getByIdUsingGET7 = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdUsingGET7");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = UserRoleDTO;

      return this.apiClient.callApi(
        '/api/user_roles/id/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByNameSearchQueryUsingGET operation.
     * @callback module:api/UserRoleResourceApi~getByNameSearchQueryUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserRoleDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getByNameSearchQuery
     * @param {String} searchQuery searchQuery
     * @param {module:api/UserRoleResourceApi~getByNameSearchQueryUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserRoleDTO>}
     */
    this.getByNameSearchQueryUsingGET = function(searchQuery, callback) {
      var postBody = null;

      // verify the required parameter 'searchQuery' is set
      if (searchQuery === undefined || searchQuery === null) {
        throw new Error("Missing the required parameter 'searchQuery' when calling getByNameSearchQueryUsingGET");
      }


      var pathParams = {
        'searchQuery': searchQuery
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [UserRoleDTO];

      return this.apiClient.callApi(
        '/api/user_roles/name/{searchQuery}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersByUserRoleIdUsingGET operation.
     * @callback module:api/UserRoleResourceApi~getUsersByUserRoleIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getUsersByUserRoleId
     * @param {Number} id id
     * @param {module:api/UserRoleResourceApi~getUsersByUserRoleIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserDTO>}
     */
    this.getUsersByUserRoleIdUsingGET = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUsersByUserRoleIdUsingGET");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [UserDTO];

      return this.apiClient.callApi(
        '/api/user_roles/id/{id}/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUsingPUT6 operation.
     * @callback module:api/UserRoleResourceApi~updateUsingPUT6Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRoleDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update
     * @param {module:model/UserRoleDTO} userRoleDto userRoleDto
     * @param {module:api/UserRoleResourceApi~updateUsingPUT6Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRoleDTO}
     */
    this.updateUsingPUT6 = function(userRoleDto, callback) {
      var postBody = userRoleDto;

      // verify the required parameter 'userRoleDto' is set
      if (userRoleDto === undefined || userRoleDto === null) {
        throw new Error("Missing the required parameter 'userRoleDto' when calling updateUsingPUT6");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = UserRoleDTO;

      return this.apiClient.callApi(
        '/api/user_roles', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
