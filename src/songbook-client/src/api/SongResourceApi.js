/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {CreateSongDTO} from '../model/CreateSongDTO';
import {PlaylistDTO} from '../model/PlaylistDTO';
import {SongDTO} from '../model/SongDTO';
import {UniversalCreateDTO} from '../model/UniversalCreateDTO';
import {UserDTO} from '../model/UserDTO';
import {UserSongRatingDTO} from '../model/UserSongRatingDTO';

/**
* SongResource service.
* @module api/SongResourceApi
* @version 1.5.5
*/
export class SongResourceApi {

    /**
    * Constructs a new SongResourceApi. 
    * @alias module:api/SongResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTagToSongUsingPATCH operation.
     * @callback module:api/SongResourceApi~addTagToSongUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addTagToSong
     * @param {Number} id id
     * @param {module:model/UniversalCreateDTO} tag tag
     * @param {module:api/SongResourceApi~addTagToSongUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongDTO}
     */
    addTagToSongUsingPATCH(id, tag, callback) {
      let postBody = tag;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addTagToSongUsingPATCH");
      }

      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling addTagToSongUsingPATCH");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SongDTO;

      return this.apiClient.callApi(
        '/api/songs/{id}/add-tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addTagsToSongBulkUsingPATCH operation.
     * @callback module:api/SongResourceApi~addTagsToSongBulkUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addTagsToSongBulk
     * @param {Number} id id
     * @param {Array.<module:model/UniversalCreateDTO>} tags tags
     * @param {module:api/SongResourceApi~addTagsToSongBulkUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongDTO}
     */
    addTagsToSongBulkUsingPATCH(id, tags, callback) {
      let postBody = tags;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addTagsToSongBulkUsingPATCH");
      }

      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling addTagsToSongBulkUsingPATCH");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SongDTO;

      return this.apiClient.callApi(
        '/api/songs/{id}/add-tag-bulk', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the approveSongUsingPUT operation.
     * @callback module:api/SongResourceApi~approveSongUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * approveSong
     * @param {Number} id id
     * @param {module:api/SongResourceApi~approveSongUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongDTO}
     */
    approveSongUsingPUT(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling approveSongUsingPUT");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SongDTO;

      return this.apiClient.callApi(
        '/api/songs/{id}/approve', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createUsingPOST4 operation.
     * @callback module:api/SongResourceApi~createUsingPOST4Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SongDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create
     * @param {module:model/CreateSongDTO} obj obj
     * @param {module:api/SongResourceApi~createUsingPOST4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongDTO}
     */
    createUsingPOST4(obj, callback) {
      let postBody = obj;

      // verify the required parameter 'obj' is set
      if (obj === undefined || obj === null) {
        throw new Error("Missing the required parameter 'obj' when calling createUsingPOST4");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SongDTO;

      return this.apiClient.callApi(
        '/api/songs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUsingDELETE4 operation.
     * @callback module:api/SongResourceApi~deleteUsingDELETE4Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete
     * @param {Number} id id
     * @param {module:api/SongResourceApi~deleteUsingDELETE4Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUsingDELETE4(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUsingDELETE4");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/songs/id/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllUsingGET4 operation.
     * @callback module:api/SongResourceApi~getAllUsingGET4Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAll
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeAwaiting include_awaiting
     * @param {Number} opts.limit limit
     * @param {module:api/SongResourceApi~getAllUsingGET4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    getAllUsingGET4(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'include_awaiting': opts['includeAwaiting'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/songs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByAuthorUsingGET operation.
     * @callback module:api/SongResourceApi~getByAuthorUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getByAuthor
     * @param {Number} authorId authorId
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit limit
     * @param {module:api/SongResourceApi~getByAuthorUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    getByAuthorUsingGET(authorId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'authorId' is set
      if (authorId === undefined || authorId === null) {
        throw new Error("Missing the required parameter 'authorId' when calling getByAuthorUsingGET");
      }


      let pathParams = {
        'authorId': authorId
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/songs/author/{authorId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByCategoryUsingGET1 operation.
     * @callback module:api/SongResourceApi~getByCategoryUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getByCategory
     * @param {Number} categoryId categoryId
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit limit
     * @param {module:api/SongResourceApi~getByCategoryUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    getByCategoryUsingGET1(categoryId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getByCategoryUsingGET1");
      }


      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/songs/category/{categoryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByIdUsingGET4 operation.
     * @callback module:api/SongResourceApi~getByIdUsingGET4Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SongDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getById
     * @param {Number} id id
     * @param {module:api/SongResourceApi~getByIdUsingGET4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongDTO}
     */
    getByIdUsingGET4(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdUsingGET4");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SongDTO;

      return this.apiClient.callApi(
        '/api/songs/id/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByLyricsFragmentUsingGET1 operation.
     * @callback module:api/SongResourceApi~getByLyricsFragmentUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getByLyricsFragment
     * @param {String} value value
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit limit
     * @param {module:api/SongResourceApi~getByLyricsFragmentUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    getByLyricsFragmentUsingGET1(value, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling getByLyricsFragmentUsingGET1");
      }


      let pathParams = {
        'value': value
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/songs/lyrics_fragment/{value}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByRatingUsingGET operation.
     * @callback module:api/SongResourceApi~getByRatingUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getByRating
     * @param {Object} opts Optional parameters
     * @param {Number} opts.equal equal
     * @param {Number} opts.greaterThanEqual greaterThanEqual
     * @param {Number} opts.lessThanEqual lessThanEqual
     * @param {module:api/SongResourceApi~getByRatingUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    getByRatingUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'equal': opts['equal'],
        'greaterThanEqual': opts['greaterThanEqual'],
        'lessThanEqual': opts['lessThanEqual']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/songs/rating', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByTagUsingGET1 operation.
     * @callback module:api/SongResourceApi~getByTagUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getByTag
     * @param {Number} tagId tagId
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit limit
     * @param {module:api/SongResourceApi~getByTagUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    getByTagUsingGET1(tagId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getByTagUsingGET1");
      }


      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/songs/tag/{tagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getByTitleFragmentUsingGET1 operation.
     * @callback module:api/SongResourceApi~getByTitleFragmentUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getByTitleFragment
     * @param {String} title title
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit limit
     * @param {module:api/SongResourceApi~getByTitleFragmentUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    getByTitleFragmentUsingGET1(title, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling getByTitleFragmentUsingGET1");
      }


      let pathParams = {
        'title': title
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/songs/title/{title}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLatestUsingGET1 operation.
     * @callback module:api/SongResourceApi~getLatestUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getLatest
     * @param {Number} limit limit
     * @param {module:api/SongResourceApi~getLatestUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    getLatestUsingGET1(limit, callback) {
      let postBody = null;

      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling getLatestUsingGET1");
      }


      let pathParams = {
      };
      let queryParams = {
        'limit': limit
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/songs/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongPlaylistsUsingGET operation.
     * @callback module:api/SongResourceApi~getSongPlaylistsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlaylistDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongPlaylists
     * @param {Number} id id
     * @param {module:api/SongResourceApi~getSongPlaylistsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlaylistDTO>}
     */
    getSongPlaylistsUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongPlaylistsUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [PlaylistDTO];

      return this.apiClient.callApi(
        '/api/songs/id/{id}/playlists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongRatingsUsingGET operation.
     * @callback module:api/SongResourceApi~getSongRatingsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserSongRatingDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongRatings
     * @param {Number} id id
     * @param {module:api/SongResourceApi~getSongRatingsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserSongRatingDTO>}
     */
    getSongRatingsUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongRatingsUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UserSongRatingDTO];

      return this.apiClient.callApi(
        '/api/songs/id/{id}/ratings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongUserLibrariesUsingGET operation.
     * @callback module:api/SongResourceApi~getSongUserLibrariesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongUserLibraries
     * @param {Number} id id
     * @param {module:api/SongResourceApi~getSongUserLibrariesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserDTO>}
     */
    getSongUserLibrariesUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongUserLibrariesUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UserDTO];

      return this.apiClient.callApi(
        '/api/songs/id/{id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongsAddedByUserUsingGET operation.
     * @callback module:api/SongResourceApi~getSongsAddedByUserUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongsAddedByUser
     * @param {Number} id id
     * @param {module:api/SongResourceApi~getSongsAddedByUserUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    getSongsAddedByUserUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongsAddedByUserUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/songs/user/{id}/added', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongsEditedByUserUsingGET operation.
     * @callback module:api/SongResourceApi~getSongsEditedByUserUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongsEditedByUser
     * @param {Number} id id
     * @param {module:api/SongResourceApi~getSongsEditedByUserUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    getSongsEditedByUserUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongsEditedByUserUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/songs/user/{id}/edited', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserSongsUsingGET operation.
     * @callback module:api/SongResourceApi~getUserSongsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getUserSongs
     * @param {Number} id id
     * @param {module:api/SongResourceApi~getUserSongsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    getUserSongsUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserSongsUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/songs/user/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loadFromFileUsingPOST operation.
     * @callback module:api/SongResourceApi~loadFromFileUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * loadFromFile
     * @param {File} file file
     * @param {module:api/SongResourceApi~loadFromFileUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongDTO}
     */
    loadFromFileUsingPOST(file, callback) {
      let postBody = null;

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling loadFromFileUsingPOST");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = SongDTO;

      return this.apiClient.callApi(
        '/api/songs/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTagFromSongUsingPATCH operation.
     * @callback module:api/SongResourceApi~removeTagFromSongUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removeTagFromSong
     * @param {Number} id id
     * @param {Number} tagId tagId
     * @param {module:api/SongResourceApi~removeTagFromSongUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongDTO}
     */
    removeTagFromSongUsingPATCH(id, tagId, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeTagFromSongUsingPATCH");
      }

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling removeTagFromSongUsingPATCH");
      }


      let pathParams = {
        'id': id,
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SongDTO;

      return this.apiClient.callApi(
        '/api/songs/{id}/remove-tag/{tagId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTagsFromSongBulkUsingPATCH operation.
     * @callback module:api/SongResourceApi~removeTagsFromSongBulkUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removeTagsFromSongBulk
     * @param {Number} id id
     * @param {String} tagIds tagIds
     * @param {module:api/SongResourceApi~removeTagsFromSongBulkUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongDTO}
     */
    removeTagsFromSongBulkUsingPATCH(id, tagIds, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeTagsFromSongBulkUsingPATCH");
      }

      // verify the required parameter 'tagIds' is set
      if (tagIds === undefined || tagIds === null) {
        throw new Error("Missing the required parameter 'tagIds' when calling removeTagsFromSongBulkUsingPATCH");
      }


      let pathParams = {
        'id': id,
        'tagIds': tagIds
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SongDTO;

      return this.apiClient.callApi(
        '/api/songs/{id}/remove-tag-bulk/{tagIds}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUsingPUT4 operation.
     * @callback module:api/SongResourceApi~updateUsingPUT4Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SongDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update
     * @param {module:model/SongDTO} obj obj
     * @param {module:api/SongResourceApi~updateUsingPUT4Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongDTO}
     */
    updateUsingPUT4(obj, callback) {
      let postBody = obj;

      // verify the required parameter 'obj' is set
      if (obj === undefined || obj === null) {
        throw new Error("Missing the required parameter 'obj' when calling updateUsingPUT4");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SongDTO;

      return this.apiClient.callApi(
        '/api/songs', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
