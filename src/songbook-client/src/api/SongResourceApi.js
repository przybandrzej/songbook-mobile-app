/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {AuthorDTO} from '../model/AuthorDTO';
import {CategoryDTO} from '../model/CategoryDTO';
import {CreateCoauthorDTO} from '../model/CreateCoauthorDTO';
import {CreateSongDTO} from '../model/CreateSongDTO';
import {CreateVerseDTO} from '../model/CreateVerseDTO';
import {PlaylistDTO} from '../model/PlaylistDTO';
import {SongAddDTO} from '../model/SongAddDTO';
import {SongCoauthorDTO} from '../model/SongCoauthorDTO';
import {SongDTO} from '../model/SongDTO';
import {SongEditDTO} from '../model/SongEditDTO';
import {TagDTO} from '../model/TagDTO';
import {UniversalCreateDTO} from '../model/UniversalCreateDTO';
import {UserDTO} from '../model/UserDTO';
import {UserSongRatingDTO} from '../model/UserSongRatingDTO';
import {VerseDTO} from '../model/VerseDTO';

/**
* SongResource service.
* @module api/SongResourceApi
* @version 1.5.5
*/
export class SongResourceApi {

    /**
    * Constructs a new SongResourceApi. 
    * @alias module:api/SongResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCoauthorToSongUsingPATCH operation.
     * @callback module:api/SongResourceApi~addCoauthorToSongUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongCoauthorDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addCoauthorToSong
     * @param {module:model/CreateCoauthorDTO} coauthor coauthor
     * @param {Number} id id
     * @param {module:api/SongResourceApi~addCoauthorToSongUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongCoauthorDTO}
     */
    addCoauthorToSongUsingPATCH(coauthor, id, callback) {
      let postBody = coauthor;

      // verify the required parameter 'coauthor' is set
      if (coauthor === undefined || coauthor === null) {
        throw new Error("Missing the required parameter 'coauthor' when calling addCoauthorToSongUsingPATCH");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addCoauthorToSongUsingPATCH");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SongCoauthorDTO;

      return this.apiClient.callApi(
        '/api/songs/{id}/add-coauthor', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addTagToSongUsingPATCH operation.
     * @callback module:api/SongResourceApi~addTagToSongUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addTagToSong
     * @param {Number} id id
     * @param {module:model/UniversalCreateDTO} tag tag
     * @param {module:api/SongResourceApi~addTagToSongUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagDTO}
     */
    addTagToSongUsingPATCH(id, tag, callback) {
      let postBody = tag;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addTagToSongUsingPATCH");
      }

      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling addTagToSongUsingPATCH");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = TagDTO;

      return this.apiClient.callApi(
        '/api/songs/{id}/add-tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addTagsToSongBulkUsingPATCH operation.
     * @callback module:api/SongResourceApi~addTagsToSongBulkUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addTagsToSongBulk
     * @param {Number} id id
     * @param {Array.<module:model/UniversalCreateDTO>} tags tags
     * @param {module:api/SongResourceApi~addTagsToSongBulkUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagDTO>}
     */
    addTagsToSongBulkUsingPATCH(id, tags, callback) {
      let postBody = tags;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addTagsToSongBulkUsingPATCH");
      }

      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling addTagsToSongBulkUsingPATCH");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = [TagDTO];

      return this.apiClient.callApi(
        '/api/songs/{id}/add-tag-bulk', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addVerseToSongUsingPATCH operation.
     * @callback module:api/SongResourceApi~addVerseToSongUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addVerseToSong
     * @param {Number} id id
     * @param {module:model/CreateVerseDTO} verse verse
     * @param {module:api/SongResourceApi~addVerseToSongUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerseDTO}
     */
    addVerseToSongUsingPATCH(id, verse, callback) {
      let postBody = verse;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addVerseToSongUsingPATCH");
      }

      // verify the required parameter 'verse' is set
      if (verse === undefined || verse === null) {
        throw new Error("Missing the required parameter 'verse' when calling addVerseToSongUsingPATCH");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = VerseDTO;

      return this.apiClient.callApi(
        '/api/songs/{id}/add-verse', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the approveSongUsingPATCH operation.
     * @callback module:api/SongResourceApi~approveSongUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * approveSong
     * @param {Number} id id
     * @param {module:api/SongResourceApi~approveSongUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongDTO}
     */
    approveSongUsingPATCH(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling approveSongUsingPATCH");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SongDTO;

      return this.apiClient.callApi(
        '/api/songs/{id}/approve', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSongUsingPOST operation.
     * @callback module:api/SongResourceApi~createSongUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createSong
     * @param {module:model/CreateSongDTO} obj obj
     * @param {module:api/SongResourceApi~createSongUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongDTO}
     */
    createSongUsingPOST(obj, callback) {
      let postBody = obj;

      // verify the required parameter 'obj' is set
      if (obj === undefined || obj === null) {
        throw new Error("Missing the required parameter 'obj' when calling createSongUsingPOST");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SongDTO;

      return this.apiClient.callApi(
        '/api/songs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSongUsingDELETE operation.
     * @callback module:api/SongResourceApi~deleteSongUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteSong
     * @param {Number} id id
     * @param {module:api/SongResourceApi~deleteSongUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSongUsingDELETE(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSongUsingDELETE");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/songs/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllSongsUsingGET operation.
     * @callback module:api/SongResourceApi~getAllSongsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllSongs
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeAwaiting include_awaiting
     * @param {Number} opts.limit limit
     * @param {module:api/SongResourceApi~getAllSongsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    getAllSongsUsingGET(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'include_awaiting': opts['includeAwaiting'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/songs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongAddedByUsingGET operation.
     * @callback module:api/SongResourceApi~getSongAddedByUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongAddDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongAddedBy
     * @param {Number} id id
     * @param {module:api/SongResourceApi~getSongAddedByUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongAddDTO}
     */
    getSongAddedByUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongAddedByUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SongAddDTO;

      return this.apiClient.callApi(
        '/api/songs/{id}/added-by', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongAuthorUsingGET operation.
     * @callback module:api/SongResourceApi~getSongAuthorUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongAuthor
     * @param {Number} id id
     * @param {module:api/SongResourceApi~getSongAuthorUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorDTO}
     */
    getSongAuthorUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongAuthorUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AuthorDTO;

      return this.apiClient.callApi(
        '/api/songs/{id}/author', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongByIdUsingGET operation.
     * @callback module:api/SongResourceApi~getSongByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongById
     * @param {Number} id id
     * @param {module:api/SongResourceApi~getSongByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongDTO}
     */
    getSongByIdUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongByIdUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SongDTO;

      return this.apiClient.callApi(
        '/api/songs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongByTitleFragmentUsingGET operation.
     * @callback module:api/SongResourceApi~getSongByTitleFragmentUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongByTitleFragment
     * @param {String} title title
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit limit
     * @param {module:api/SongResourceApi~getSongByTitleFragmentUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongDTO>}
     */
    getSongByTitleFragmentUsingGET(title, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling getSongByTitleFragmentUsingGET");
      }


      let pathParams = {
        'title': title
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongDTO];

      return this.apiClient.callApi(
        '/api/songs/title/{title}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongCategoryUsingGET operation.
     * @callback module:api/SongResourceApi~getSongCategoryUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongCategory
     * @param {Number} id id
     * @param {module:api/SongResourceApi~getSongCategoryUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryDTO}
     */
    getSongCategoryUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongCategoryUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CategoryDTO;

      return this.apiClient.callApi(
        '/api/songs/{id}/category', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongCoauthorsUsingGET operation.
     * @callback module:api/SongResourceApi~getSongCoauthorsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongCoauthorDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongCoauthors
     * @param {Number} id id
     * @param {module:api/SongResourceApi~getSongCoauthorsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongCoauthorDTO>}
     */
    getSongCoauthorsUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongCoauthorsUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongCoauthorDTO];

      return this.apiClient.callApi(
        '/api/songs/{id}/coauthors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongEditsUsingGET operation.
     * @callback module:api/SongResourceApi~getSongEditsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongEditDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongEdits
     * @param {Number} id id
     * @param {module:api/SongResourceApi~getSongEditsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongEditDTO>}
     */
    getSongEditsUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongEditsUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SongEditDTO];

      return this.apiClient.callApi(
        '/api/songs/{id}/edits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongPlaylistsUsingGET operation.
     * @callback module:api/SongResourceApi~getSongPlaylistsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlaylistDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongPlaylists
     * @param {Number} id id
     * @param {module:api/SongResourceApi~getSongPlaylistsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlaylistDTO>}
     */
    getSongPlaylistsUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongPlaylistsUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [PlaylistDTO];

      return this.apiClient.callApi(
        '/api/songs/{id}/playlists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongRatingsUsingGET operation.
     * @callback module:api/SongResourceApi~getSongRatingsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserSongRatingDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongRatings
     * @param {Number} id id
     * @param {module:api/SongResourceApi~getSongRatingsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserSongRatingDTO>}
     */
    getSongRatingsUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongRatingsUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UserSongRatingDTO];

      return this.apiClient.callApi(
        '/api/songs/{id}/ratings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongTagsUsingGET operation.
     * @callback module:api/SongResourceApi~getSongTagsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongTags
     * @param {Number} id id
     * @param {module:api/SongResourceApi~getSongTagsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagDTO>}
     */
    getSongTagsUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongTagsUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TagDTO];

      return this.apiClient.callApi(
        '/api/songs/{id}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongUserLibrariesUsingGET operation.
     * @callback module:api/SongResourceApi~getSongUserLibrariesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongUserLibraries
     * @param {Number} id id
     * @param {module:api/SongResourceApi~getSongUserLibrariesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserDTO>}
     */
    getSongUserLibrariesUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongUserLibrariesUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UserDTO];

      return this.apiClient.callApi(
        '/api/songs/{id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSongVersesUsingGET operation.
     * @callback module:api/SongResourceApi~getSongVersesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VerseDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSongVerses
     * @param {Number} id id
     * @param {module:api/SongResourceApi~getSongVersesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VerseDTO>}
     */
    getSongVersesUsingGET(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSongVersesUsingGET");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [VerseDTO];

      return this.apiClient.callApi(
        '/api/songs/{id}/verses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loadSongFromFileUsingPOST operation.
     * @callback module:api/SongResourceApi~loadSongFromFileUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * loadSongFromFile
     * @param {File} file file
     * @param {module:api/SongResourceApi~loadSongFromFileUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongDTO}
     */
    loadSongFromFileUsingPOST(file, callback) {
      let postBody = null;

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling loadSongFromFileUsingPOST");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = SongDTO;

      return this.apiClient.callApi(
        '/api/songs/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeCoauthorFromSongUsingPATCH operation.
     * @callback module:api/SongResourceApi~removeCoauthorFromSongUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removeCoauthorFromSong
     * @param {Number} coauthorId coauthorId
     * @param {Number} id id
     * @param {module:api/SongResourceApi~removeCoauthorFromSongUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeCoauthorFromSongUsingPATCH(coauthorId, id, callback) {
      let postBody = null;

      // verify the required parameter 'coauthorId' is set
      if (coauthorId === undefined || coauthorId === null) {
        throw new Error("Missing the required parameter 'coauthorId' when calling removeCoauthorFromSongUsingPATCH");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeCoauthorFromSongUsingPATCH");
      }


      let pathParams = {
        'coauthorId': coauthorId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/songs/{id}/remove-coauthor/{coauthorId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTagFromSongUsingPATCH operation.
     * @callback module:api/SongResourceApi~removeTagFromSongUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removeTagFromSong
     * @param {Number} id id
     * @param {Number} tagId tagId
     * @param {module:api/SongResourceApi~removeTagFromSongUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeTagFromSongUsingPATCH(id, tagId, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeTagFromSongUsingPATCH");
      }

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling removeTagFromSongUsingPATCH");
      }


      let pathParams = {
        'id': id,
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/songs/{id}/remove-tag/{tagId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTagsFromSongBulkUsingPATCH operation.
     * @callback module:api/SongResourceApi~removeTagsFromSongBulkUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removeTagsFromSongBulk
     * @param {Number} id id
     * @param {String} tagIds tagIds
     * @param {module:api/SongResourceApi~removeTagsFromSongBulkUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeTagsFromSongBulkUsingPATCH(id, tagIds, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeTagsFromSongBulkUsingPATCH");
      }

      // verify the required parameter 'tagIds' is set
      if (tagIds === undefined || tagIds === null) {
        throw new Error("Missing the required parameter 'tagIds' when calling removeTagsFromSongBulkUsingPATCH");
      }


      let pathParams = {
        'id': id,
        'tagIds': tagIds
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/songs/{id}/remove-tag-bulk/{tagIds}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeVerseFromSongUsingPATCH operation.
     * @callback module:api/SongResourceApi~removeVerseFromSongUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removeVerseFromSong
     * @param {Number} id id
     * @param {Number} verseId verseId
     * @param {module:api/SongResourceApi~removeVerseFromSongUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeVerseFromSongUsingPATCH(id, verseId, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeVerseFromSongUsingPATCH");
      }

      // verify the required parameter 'verseId' is set
      if (verseId === undefined || verseId === null) {
        throw new Error("Missing the required parameter 'verseId' when calling removeVerseFromSongUsingPATCH");
      }


      let pathParams = {
        'id': id,
        'verseId': verseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/songs/{id}/remove-verse/{verseId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setAuthorUsingPATCH operation.
     * @callback module:api/SongResourceApi~setAuthorUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * setAuthor
     * @param {Number} authorId authorId
     * @param {Number} id id
     * @param {module:api/SongResourceApi~setAuthorUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setAuthorUsingPATCH(authorId, id, callback) {
      let postBody = null;

      // verify the required parameter 'authorId' is set
      if (authorId === undefined || authorId === null) {
        throw new Error("Missing the required parameter 'authorId' when calling setAuthorUsingPATCH");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setAuthorUsingPATCH");
      }


      let pathParams = {
        'authorId': authorId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/songs/{id}/set-author/{authorId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setCategoryUsingPATCH operation.
     * @callback module:api/SongResourceApi~setCategoryUsingPATCHCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * setCategory
     * @param {Number} categoryId categoryId
     * @param {Number} id id
     * @param {module:api/SongResourceApi~setCategoryUsingPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setCategoryUsingPATCH(categoryId, id, callback) {
      let postBody = null;

      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling setCategoryUsingPATCH");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setCategoryUsingPATCH");
      }


      let pathParams = {
        'categoryId': categoryId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/songs/{id}/set-category/{categoryId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSongUsingPUT operation.
     * @callback module:api/SongResourceApi~updateSongUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateSong
     * @param {module:model/SongDTO} obj obj
     * @param {module:api/SongResourceApi~updateSongUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongDTO}
     */
    updateSongUsingPUT(obj, callback) {
      let postBody = obj;

      // verify the required parameter 'obj' is set
      if (obj === undefined || obj === null) {
        throw new Error("Missing the required parameter 'obj' when calling updateSongUsingPUT");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SongDTO;

      return this.apiClient.callApi(
        '/api/songs', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
