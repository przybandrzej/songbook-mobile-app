/*
 * Songbook API
 * Tourist songs application
 *
 * OpenAPI spec version: 1.5.5
 * Contact: andrzej.przybysz01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AuthorDTO', 'model/CategoryDTO', 'model/SongAddDTO', 'model/SongCoauthorDTO', 'model/SongEditDTO', 'model/TagDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AuthorDTO'), require('./CategoryDTO'), require('./SongAddDTO'), require('./SongCoauthorDTO'), require('./SongEditDTO'), require('./TagDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.SongbookApi) {
      root.SongbookApi = {};
    }
    root.SongbookApi.SongDTO = factory(root.SongbookApi.ApiClient, root.SongbookApi.AuthorDTO, root.SongbookApi.CategoryDTO, root.SongbookApi.SongAddDTO, root.SongbookApi.SongCoauthorDTO, root.SongbookApi.SongEditDTO, root.SongbookApi.TagDTO);
  }
}(this, function(ApiClient, AuthorDTO, CategoryDTO, SongAddDTO, SongCoauthorDTO, SongEditDTO, TagDTO) {
  'use strict';

  /**
   * The SongDTO model module.
   * @module model/SongDTO
   * @version 1.5.5
   */

  /**
   * Constructs a new <code>SongDTO</code>.
   * @alias module:model/SongDTO
   * @class
   * @param coauthors {Array.<module:model/SongCoauthorDTO>} 
   * @param edits {Array.<module:model/SongEditDTO>} 
   * @param id {Number} 
   * @param tags {Array.<module:model/TagDTO>} 
   * @param title {String} 
   */
  var exports = function(coauthors, edits, id, tags, title) {
    this.coauthors = coauthors;
    this.edits = edits;
    this.id = id;
    this.tags = tags;
    this.title = title;
  };

  /**
   * Constructs a <code>SongDTO</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SongDTO} obj Optional instance to populate.
   * @return {module:model/SongDTO} The populated <code>SongDTO</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('addedBy'))
        obj.addedBy = SongAddDTO.constructFromObject(data['addedBy']);
      if (data.hasOwnProperty('author'))
        obj.author = AuthorDTO.constructFromObject(data['author']);
      if (data.hasOwnProperty('averageRating'))
        obj.averageRating = ApiClient.convertToType(data['averageRating'], 'Number');
      if (data.hasOwnProperty('category'))
        obj.category = CategoryDTO.constructFromObject(data['category']);
      if (data.hasOwnProperty('coauthors'))
        obj.coauthors = ApiClient.convertToType(data['coauthors'], [SongCoauthorDTO]);
      if (data.hasOwnProperty('edits'))
        obj.edits = ApiClient.convertToType(data['edits'], [SongEditDTO]);
      if (data.hasOwnProperty('guitarTabs'))
        obj.guitarTabs = ApiClient.convertToType(data['guitarTabs'], 'String');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('isAwaiting'))
        obj.isAwaiting = ApiClient.convertToType(data['isAwaiting'], 'Boolean');
      if (data.hasOwnProperty('lyrics'))
        obj.lyrics = ApiClient.convertToType(data['lyrics'], 'String');
      if (data.hasOwnProperty('tags'))
        obj.tags = ApiClient.convertToType(data['tags'], [TagDTO]);
      if (data.hasOwnProperty('title'))
        obj.title = ApiClient.convertToType(data['title'], 'String');
      if (data.hasOwnProperty('trivia'))
        obj.trivia = ApiClient.convertToType(data['trivia'], 'String');
    }
    return obj;
  }

  /**
   * @member {module:model/SongAddDTO} addedBy
   */
  exports.prototype.addedBy = undefined;

  /**
   * @member {module:model/AuthorDTO} author
   */
  exports.prototype.author = undefined;

  /**
   * @member {Number} averageRating
   */
  exports.prototype.averageRating = undefined;

  /**
   * @member {module:model/CategoryDTO} category
   */
  exports.prototype.category = undefined;

  /**
   * @member {Array.<module:model/SongCoauthorDTO>} coauthors
   */
  exports.prototype.coauthors = undefined;

  /**
   * @member {Array.<module:model/SongEditDTO>} edits
   */
  exports.prototype.edits = undefined;

  /**
   * @member {String} guitarTabs
   */
  exports.prototype.guitarTabs = undefined;

  /**
   * @member {Number} id
   */
  exports.prototype.id = undefined;

  /**
   * @member {Boolean} isAwaiting
   */
  exports.prototype.isAwaiting = undefined;

  /**
   * @member {String} lyrics
   */
  exports.prototype.lyrics = undefined;

  /**
   * @member {Array.<module:model/TagDTO>} tags
   */
  exports.prototype.tags = undefined;

  /**
   * @member {String} title
   */
  exports.prototype.title = undefined;

  /**
   * @member {String} trivia
   */
  exports.prototype.trivia = undefined;

  return exports;

}));
